/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sebastien.favre@docapost.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.Annotation;
import io.leia.client.model.AnnotationTypes;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnotationApi {
    private ApiClient localVarApiClient;

    public AnnotationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAnnotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to annotate (required)
     * @param annotationType The type of the annotation (required)
     * @param body The prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The name of the annotation (for information purposes only) (optional)
     * @param tags The tags of the annotation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnnotationCall(String token, String documentId, AnnotationTypes annotationType, Object body, String name, List<String> tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/annotation/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (annotationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annotation_type", annotationType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnnotationValidateBeforeCall(String token, String documentId, AnnotationTypes annotationType, Object body, String name, List<String> tags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling createAnnotation(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling createAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationType' is set
        if (annotationType == null) {
            throw new ApiException("Missing the required parameter 'annotationType' when calling createAnnotation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = createAnnotationCall(token, documentId, annotationType, body, name, tags, _callback);
        return localVarCall;

    }

    /**
     * Creates an annotation
     * Creates an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to annotate (required)
     * @param annotationType The type of the annotation (required)
     * @param body The prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The name of the annotation (for information purposes only) (optional)
     * @param tags The tags of the annotation (optional)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public Annotation createAnnotation(String token, String documentId, AnnotationTypes annotationType, Object body, String name, List<String> tags) throws ApiException {
        ApiResponse<Annotation> localVarResp = createAnnotationWithHttpInfo(token, documentId, annotationType, body, name, tags);
        return localVarResp.getData();
    }

    /**
     * Creates an annotation
     * Creates an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to annotate (required)
     * @param annotationType The type of the annotation (required)
     * @param body The prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The name of the annotation (for information purposes only) (optional)
     * @param tags The tags of the annotation (optional)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> createAnnotationWithHttpInfo(String token, String documentId, AnnotationTypes annotationType, Object body, String name, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = createAnnotationValidateBeforeCall(token, documentId, annotationType, body, name, tags, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an annotation (asynchronously)
     * Creates an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to annotate (required)
     * @param annotationType The type of the annotation (required)
     * @param body The prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The name of the annotation (for information purposes only) (optional)
     * @param tags The tags of the annotation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnnotationAsync(String token, String documentId, AnnotationTypes annotationType, Object body, String name, List<String> tags, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnnotationValidateBeforeCall(token, documentId, annotationType, body, name, tags, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAnnotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Annotation deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Annotation used in a model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnnotationCall(String token, String annotationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/{annotation_id}"
            .replaceAll("\\{" + "annotation_id" + "\\}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnnotationValidateBeforeCall(String token, String annotationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling deleteAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAnnotationCall(token, annotationId, _callback);
        return localVarCall;

    }

    /**
     * Deletes an annotation
     * Deletes an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Annotation deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Annotation used in a model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnnotation(String token, String annotationId) throws ApiException {
        deleteAnnotationWithHttpInfo(token, annotationId);
    }

    /**
     * Deletes an annotation
     * Deletes an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Annotation deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Annotation used in a model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnnotationWithHttpInfo(String token, String annotationId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnnotationValidateBeforeCall(token, annotationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an annotation (asynchronously)
     * Deletes an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Annotation deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Annotation used in a model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnnotationAsync(String token, String annotationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnnotationValidateBeforeCall(token, annotationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationCall(String token, String annotationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/{annotation_id}"
            .replaceAll("\\{" + "annotation_id" + "\\}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationValidateBeforeCall(String token, String annotationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = getAnnotationCall(token, annotationId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves an annotation
     * Retrieves an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public Annotation getAnnotation(String token, String annotationId) throws ApiException {
        ApiResponse<Annotation> localVarResp = getAnnotationWithHttpInfo(token, annotationId);
        return localVarResp.getData();
    }

    /**
     * Retrieves an annotation
     * Retrieves an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> getAnnotationWithHttpInfo(String token, String annotationId) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationValidateBeforeCall(token, annotationId, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an annotation (asynchronously)
     * Retrieves an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (for information purposes only) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationAsync(String token, String annotationId, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationValidateBeforeCall(token, annotationId, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotations
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId If specified, filters the annotations id (optional)
     * @param annotationType If specified, filters the annotations by type (optional)
     * @param name If specified, filters the annotations by name (optional)
     * @param tags If specified, filters the annotations by tag (optional)
     * @param documentId If specified, filters the annotations attached to a given document (optional)
     * @param createdAfter If specified, keeps only annotations created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only annotations created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param offset Number of the first annotation to send (pagination) (optional)
     * @param limit Maximum number of annotation to send (pagination) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotations. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: annotation max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsCall(String token, String annotationId, AnnotationTypes annotationType, String name, List<String> tags, String documentId, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (annotationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annotation_id", annotationId));
        }

        if (annotationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annotation_type", annotationType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationsValidateBeforeCall(String token, String annotationId, AnnotationTypes annotationType, String name, List<String> tags, String documentId, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAnnotations(Async)");
        }
        

        okhttp3.Call localVarCall = getAnnotationsCall(token, annotationId, annotationType, name, tags, documentId, createdAfter, createdBefore, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Retrieves annotations (paginated)
     * Retrieves annotations
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId If specified, filters the annotations id (optional)
     * @param annotationType If specified, filters the annotations by type (optional)
     * @param name If specified, filters the annotations by name (optional)
     * @param tags If specified, filters the annotations by tag (optional)
     * @param documentId If specified, filters the annotations attached to a given document (optional)
     * @param createdAfter If specified, keeps only annotations created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only annotations created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param offset Number of the first annotation to send (pagination) (optional)
     * @param limit Maximum number of annotation to send (pagination) (optional)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotations. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: annotation max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> getAnnotations(String token, String annotationId, AnnotationTypes annotationType, String name, List<String> tags, String documentId, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = getAnnotationsWithHttpInfo(token, annotationId, annotationType, name, tags, documentId, createdAfter, createdBefore, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieves annotations (paginated)
     * Retrieves annotations
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId If specified, filters the annotations id (optional)
     * @param annotationType If specified, filters the annotations by type (optional)
     * @param name If specified, filters the annotations by name (optional)
     * @param tags If specified, filters the annotations by tag (optional)
     * @param documentId If specified, filters the annotations attached to a given document (optional)
     * @param createdAfter If specified, keeps only annotations created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only annotations created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param offset Number of the first annotation to send (pagination) (optional)
     * @param limit Maximum number of annotation to send (pagination) (optional)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotations. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: annotation max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> getAnnotationsWithHttpInfo(String token, String annotationId, AnnotationTypes annotationType, String name, List<String> tags, String documentId, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationsValidateBeforeCall(token, annotationId, annotationType, name, tags, documentId, createdAfter, createdBefore, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves annotations (paginated) (asynchronously)
     * Retrieves annotations
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId If specified, filters the annotations id (optional)
     * @param annotationType If specified, filters the annotations by type (optional)
     * @param name If specified, filters the annotations by name (optional)
     * @param tags If specified, filters the annotations by tag (optional)
     * @param documentId If specified, filters the annotations attached to a given document (optional)
     * @param createdAfter If specified, keeps only annotations created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only annotations created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param offset Number of the first annotation to send (pagination) (optional)
     * @param limit Maximum number of annotation to send (pagination) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved annotations. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: annotation max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsAsync(String token, String annotationId, AnnotationTypes annotationType, String name, List<String> tags, String documentId, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Integer offset, Integer limit, final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationsValidateBeforeCall(token, annotationId, annotationType, name, tags, documentId, createdAfter, createdBefore, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagAnnotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to add to the annotation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagAnnotationCall(String token, String annotationId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/{annotation_id}/tag/{tag}"
            .replaceAll("\\{" + "annotation_id" + "\\}", localVarApiClient.escapeString(annotationId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagAnnotationValidateBeforeCall(String token, String annotationId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling tagAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling tagAnnotation(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling tagAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = tagAnnotationCall(token, annotationId, tag, _callback);
        return localVarCall;

    }

    /**
     * Tags an annotation
     * Tags an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to add to the annotation (required)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public Annotation tagAnnotation(String token, String annotationId, String tag) throws ApiException {
        ApiResponse<Annotation> localVarResp = tagAnnotationWithHttpInfo(token, annotationId, tag);
        return localVarResp.getData();
    }

    /**
     * Tags an annotation
     * Tags an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to add to the annotation (required)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> tagAnnotationWithHttpInfo(String token, String annotationId, String tag) throws ApiException {
        okhttp3.Call localVarCall = tagAnnotationValidateBeforeCall(token, annotationId, tag, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tags an annotation (asynchronously)
     * Tags an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to add to the annotation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagAnnotationAsync(String token, String annotationId, String tag, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagAnnotationValidateBeforeCall(token, annotationId, tag, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagAnnotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to delete from the annotation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagAnnotationCall(String token, String annotationId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/{annotation_id}/tag/{tag}"
            .replaceAll("\\{" + "annotation_id" + "\\}", localVarApiClient.escapeString(annotationId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagAnnotationValidateBeforeCall(String token, String annotationId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling untagAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling untagAnnotation(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling untagAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = untagAnnotationCall(token, annotationId, tag, _callback);
        return localVarCall;

    }

    /**
     * Untags an annotation
     * Untags an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to delete from the annotation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public void untagAnnotation(String token, String annotationId, String tag) throws ApiException {
        untagAnnotationWithHttpInfo(token, annotationId, tag);
    }

    /**
     * Untags an annotation
     * Untags an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to delete from the annotation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagAnnotationWithHttpInfo(String token, String annotationId, String tag) throws ApiException {
        okhttp3.Call localVarCall = untagAnnotationValidateBeforeCall(token, annotationId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Untags an annotation (asynchronously)
     * Untags an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation (required)
     * @param tag The tag to delete from the annotation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The annotation without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagAnnotationAsync(String token, String annotationId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagAnnotationValidateBeforeCall(token, annotationId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnnotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation to modify (required)
     * @param body The new prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The new name of the annotation (won&#39;t change if not set) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnnotationCall(String token, String annotationId, Object body, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/annotation/{annotation_id}"
            .replaceAll("\\{" + "annotation_id" + "\\}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnnotationValidateBeforeCall(String token, String annotationId, Object body, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling updateAnnotation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = updateAnnotationCall(token, annotationId, body, name, _callback);
        return localVarCall;

    }

    /**
     * Updates an annotation
     * Updates an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation to modify (required)
     * @param body The new prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The new name of the annotation (won&#39;t change if not set) (optional)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public Annotation updateAnnotation(String token, String annotationId, Object body, String name) throws ApiException {
        ApiResponse<Annotation> localVarResp = updateAnnotationWithHttpInfo(token, annotationId, body, name);
        return localVarResp.getData();
    }

    /**
     * Updates an annotation
     * Updates an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation to modify (required)
     * @param body The new prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The new name of the annotation (won&#39;t change if not set) (optional)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> updateAnnotationWithHttpInfo(String token, String annotationId, Object body, String name) throws ApiException {
        okhttp3.Call localVarCall = updateAnnotationValidateBeforeCall(token, annotationId, body, name, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an annotation (asynchronously)
     * Updates an annotation
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param annotationId The id of the annotation to modify (required)
     * @param body The new prediction that should be associated to document in this annotation, in free form json (required)
     * @param name The new name of the annotation (won&#39;t change if not set) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, annotation created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Annotation not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnnotationAsync(String token, String annotationId, Object body, String name, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnnotationValidateBeforeCall(token, annotationId, body, name, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
