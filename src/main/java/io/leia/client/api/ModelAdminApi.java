/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@leia.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.ApplyBody;
import java.io.File;
import io.leia.client.model.FormatTypes;
import io.leia.client.model.Job;
import io.leia.client.model.Model;
import io.leia.client.model.ModelInputTypes;
import io.leia.client.model.ModelTypes;
import java.time.OffsetDateTime;
import io.leia.client.model.TrainBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModelAdminApi {
    private ApiClient localVarApiClient;

    public ModelAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModelAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for adminApplyModelAsync
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelId The id or the short name of the model to apply on the document (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param tag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param formatType The format in which the data should be returned. If empty, will return an array of key-value items. If it is classification, the result will be a Classification object. (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :   * Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))   * Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)   * Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0)     Examples       * 2: will keep all pages starting from page 3       * :5 will keep only pages 1 to 5       * 2:5 will keep only pages 3, 4 and 5       * -4: will keep only pages 7 to 10 if there are 10 total pages)       * :-2 will keep only pages 1 to 8 if there are 10 total pages)       * -4:-2 will keep only pages 7 and 8 if there are 10 total pages)   * Stride (::w) : Keep 1 page every w pages starting at the first one (example 2 will keep only odd pages)   * Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages) You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the model (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param applyBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminApplyModelAsyncCall(String token, String applicationId, String modelId, List<String> documentIds, String tag, FormatTypes formatType, String executeAfterId, String pageRange, String callbackUrl, Object modelParams, Boolean blockProcessing, ApplyBody applyBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applyBody;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_id}/apply/{document_ids}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_id" + "\\}", localVarApiClient.escapeString(modelId.toString()))
            .replaceAll("\\{" + "document_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", documentIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (formatType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format_type", formatType));
        }

        if (executeAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execute_after_id", executeAfterId));
        }

        if (pageRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_range", pageRange));
        }

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback_url", callbackUrl));
        }

        if (modelParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_params", modelParams));
        }

        if (blockProcessing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("block_processing", blockProcessing));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminApplyModelAsyncValidateBeforeCall(String token, String applicationId, String modelId, List<String> documentIds, String tag, FormatTypes formatType, String executeAfterId, String pageRange, String callbackUrl, Object modelParams, Boolean blockProcessing, ApplyBody applyBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminApplyModelAsync(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminApplyModelAsync(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling adminApplyModelAsync(Async)");
        }
        
        // verify the required parameter 'documentIds' is set
        if (documentIds == null) {
            throw new ApiException("Missing the required parameter 'documentIds' when calling adminApplyModelAsync(Async)");
        }
        

        okhttp3.Call localVarCall = adminApplyModelAsyncCall(token, applicationId, modelId, documentIds, tag, formatType, executeAfterId, pageRange, callbackUrl, modelParams, blockProcessing, applyBody, _callback);
        return localVarCall;

    }

    /**
     * Asynchronously applies a model on documents (admin only)
     * Asynchronously applies an accessible model on accessible documents and returns a Job, that will have to be polled to get the result. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelId The id or the short name of the model to apply on the document (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param tag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param formatType The format in which the data should be returned. If empty, will return an array of key-value items. If it is classification, the result will be a Classification object. (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :   * Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))   * Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)   * Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0)     Examples       * 2: will keep all pages starting from page 3       * :5 will keep only pages 1 to 5       * 2:5 will keep only pages 3, 4 and 5       * -4: will keep only pages 7 to 10 if there are 10 total pages)       * :-2 will keep only pages 1 to 8 if there are 10 total pages)       * -4:-2 will keep only pages 7 and 8 if there are 10 total pages)   * Stride (::w) : Keep 1 page every w pages starting at the first one (example 2 will keep only odd pages)   * Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages) You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the model (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param applyBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public Job adminApplyModelAsync(String token, String applicationId, String modelId, List<String> documentIds, String tag, FormatTypes formatType, String executeAfterId, String pageRange, String callbackUrl, Object modelParams, Boolean blockProcessing, ApplyBody applyBody) throws ApiException {
        ApiResponse<Job> localVarResp = adminApplyModelAsyncWithHttpInfo(token, applicationId, modelId, documentIds, tag, formatType, executeAfterId, pageRange, callbackUrl, modelParams, blockProcessing, applyBody);
        return localVarResp.getData();
    }

    /**
     * Asynchronously applies a model on documents (admin only)
     * Asynchronously applies an accessible model on accessible documents and returns a Job, that will have to be polled to get the result. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelId The id or the short name of the model to apply on the document (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param tag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param formatType The format in which the data should be returned. If empty, will return an array of key-value items. If it is classification, the result will be a Classification object. (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :   * Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))   * Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)   * Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0)     Examples       * 2: will keep all pages starting from page 3       * :5 will keep only pages 1 to 5       * 2:5 will keep only pages 3, 4 and 5       * -4: will keep only pages 7 to 10 if there are 10 total pages)       * :-2 will keep only pages 1 to 8 if there are 10 total pages)       * -4:-2 will keep only pages 7 and 8 if there are 10 total pages)   * Stride (::w) : Keep 1 page every w pages starting at the first one (example 2 will keep only odd pages)   * Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages) You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the model (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param applyBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> adminApplyModelAsyncWithHttpInfo(String token, String applicationId, String modelId, List<String> documentIds, String tag, FormatTypes formatType, String executeAfterId, String pageRange, String callbackUrl, Object modelParams, Boolean blockProcessing, ApplyBody applyBody) throws ApiException {
        okhttp3.Call localVarCall = adminApplyModelAsyncValidateBeforeCall(token, applicationId, modelId, documentIds, tag, formatType, executeAfterId, pageRange, callbackUrl, modelParams, blockProcessing, applyBody, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronously applies a model on documents (admin only) (asynchronously)
     * Asynchronously applies an accessible model on accessible documents and returns a Job, that will have to be polled to get the result. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelId The id or the short name of the model to apply on the document (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param tag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param formatType The format in which the data should be returned. If empty, will return an array of key-value items. If it is classification, the result will be a Classification object. (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :   * Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))   * Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)   * Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0)     Examples       * 2: will keep all pages starting from page 3       * :5 will keep only pages 1 to 5       * 2:5 will keep only pages 3, 4 and 5       * -4: will keep only pages 7 to 10 if there are 10 total pages)       * :-2 will keep only pages 1 to 8 if there are 10 total pages)       * -4:-2 will keep only pages 7 and 8 if there are 10 total pages)   * Stride (::w) : Keep 1 page every w pages starting at the first one (example 2 will keep only odd pages)   * Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages) You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the model (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param applyBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminApplyModelAsyncAsync(String token, String applicationId, String modelId, List<String> documentIds, String tag, FormatTypes formatType, String executeAfterId, String pageRange, String callbackUrl, Object modelParams, Boolean blockProcessing, ApplyBody applyBody, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminApplyModelAsyncValidateBeforeCall(token, applicationId, modelId, documentIds, tag, formatType, executeAfterId, pageRange, callbackUrl, modelParams, blockProcessing, applyBody, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminCreateModel
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param name The name of the model (required)
     * @param body  (required)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateModelCall(String token, String applicationId, String name, byte[] body, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (shortName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("short_name", shortName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (allowedApplicationIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "allowed_application_ids", allowedApplicationIds));
        }

        if (allowAllApplications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow_all_applications", allowAllApplications));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminCreateModelValidateBeforeCall(String token, String applicationId, String name, byte[] body, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminCreateModel(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminCreateModel(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling adminCreateModel(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminCreateModel(Async)");
        }
        

        okhttp3.Call localVarCall = adminCreateModelCall(token, applicationId, name, body, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags, _callback);
        return localVarCall;

    }

    /**
     * Adds a new model to the system (admin only)
     * Adds a new model to the system and prepares structures to be able to serve it. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param name The name of the model (required)
     * @param body  (required)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public Model adminCreateModel(String token, String applicationId, String name, byte[] body, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags) throws ApiException {
        ApiResponse<Model> localVarResp = adminCreateModelWithHttpInfo(token, applicationId, name, body, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags);
        return localVarResp.getData();
    }

    /**
     * Adds a new model to the system (admin only)
     * Adds a new model to the system and prepares structures to be able to serve it. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param name The name of the model (required)
     * @param body  (required)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model> adminCreateModelWithHttpInfo(String token, String applicationId, String name, byte[] body, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = adminCreateModelValidateBeforeCall(token, applicationId, name, body, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new model to the system (admin only) (asynchronously)
     * Adds a new model to the system and prepares structures to be able to serve it. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param name The name of the model (required)
     * @param body  (required)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateModelAsync(String token, String applicationId, String name, byte[] body, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminCreateModelValidateBeforeCall(token, applicationId, name, body, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminDeleteModel
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to delete belongs (required)
     * @param modelId The id of the model to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Model deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteModelCall(String token, String applicationId, String modelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_id" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDeleteModelValidateBeforeCall(String token, String applicationId, String modelId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminDeleteModel(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminDeleteModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling adminDeleteModel(Async)");
        }
        

        okhttp3.Call localVarCall = adminDeleteModelCall(token, applicationId, modelId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a model (admin only)
     * Get a model in the system that the application can access. This method is only accessible to admins. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to delete belongs (required)
     * @param modelId The id of the model to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Model deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public void adminDeleteModel(String token, String applicationId, String modelId) throws ApiException {
        adminDeleteModelWithHttpInfo(token, applicationId, modelId);
    }

    /**
     * Deletes a model (admin only)
     * Get a model in the system that the application can access. This method is only accessible to admins. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to delete belongs (required)
     * @param modelId The id of the model to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Model deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminDeleteModelWithHttpInfo(String token, String applicationId, String modelId) throws ApiException {
        okhttp3.Call localVarCall = adminDeleteModelValidateBeforeCall(token, applicationId, modelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a model (admin only) (asynchronously)
     * Get a model in the system that the application can access. This method is only accessible to admins. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to delete belongs (required)
     * @param modelId The id of the model to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Model deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteModelAsync(String token, String applicationId, String modelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDeleteModelValidateBeforeCall(token, applicationId, modelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminEditModel
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to modify belongs (required)
     * @param modelId The id of the model (required)
     * @param name The new name of the model (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The new description of the model (optional)
     * @param allowedApplicationIds The applications allowed to use this model. Clears the list if empty (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param ttl The new TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEditModelCall(String token, String applicationId, String modelId, String name, String shortName, String description, List<String> allowedApplicationIds, Boolean allowAllApplications, Integer ttl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_id" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (shortName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("short_name", shortName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (allowedApplicationIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "allowed_application_ids", allowedApplicationIds));
        }

        if (allowAllApplications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow_all_applications", allowAllApplications));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminEditModelValidateBeforeCall(String token, String applicationId, String modelId, String name, String shortName, String description, List<String> allowedApplicationIds, Boolean allowAllApplications, Integer ttl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminEditModel(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminEditModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling adminEditModel(Async)");
        }
        

        okhttp3.Call localVarCall = adminEditModelCall(token, applicationId, modelId, name, shortName, description, allowedApplicationIds, allowAllApplications, ttl, _callback);
        return localVarCall;

    }

    /**
     * Modifies an existing model in the system (admin only)
     * Modifies a model already in the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to modify belongs (required)
     * @param modelId The id of the model (required)
     * @param name The new name of the model (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The new description of the model (optional)
     * @param allowedApplicationIds The applications allowed to use this model. Clears the list if empty (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param ttl The new TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public Model adminEditModel(String token, String applicationId, String modelId, String name, String shortName, String description, List<String> allowedApplicationIds, Boolean allowAllApplications, Integer ttl) throws ApiException {
        ApiResponse<Model> localVarResp = adminEditModelWithHttpInfo(token, applicationId, modelId, name, shortName, description, allowedApplicationIds, allowAllApplications, ttl);
        return localVarResp.getData();
    }

    /**
     * Modifies an existing model in the system (admin only)
     * Modifies a model already in the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to modify belongs (required)
     * @param modelId The id of the model (required)
     * @param name The new name of the model (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The new description of the model (optional)
     * @param allowedApplicationIds The applications allowed to use this model. Clears the list if empty (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param ttl The new TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model> adminEditModelWithHttpInfo(String token, String applicationId, String modelId, String name, String shortName, String description, List<String> allowedApplicationIds, Boolean allowAllApplications, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = adminEditModelValidateBeforeCall(token, applicationId, modelId, name, shortName, description, allowedApplicationIds, allowAllApplications, ttl, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifies an existing model in the system (admin only) (asynchronously)
     * Modifies a model already in the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to modify belongs (required)
     * @param modelId The id of the model (required)
     * @param name The new name of the model (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The new description of the model (optional)
     * @param allowedApplicationIds The applications allowed to use this model. Clears the list if empty (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param ttl The new TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid model data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Owner application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEditModelAsync(String token, String applicationId, String modelId, String name, String shortName, String description, List<String> allowedApplicationIds, Boolean allowAllApplications, Integer ttl, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminEditModelValidateBeforeCall(token, applicationId, modelId, name, shortName, description, allowedApplicationIds, allowAllApplications, ttl, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetModel
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetModelCall(String token, String applicationId, String modelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_id" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetModelValidateBeforeCall(String token, String applicationId, String modelId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetModel(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminGetModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling adminGetModel(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetModelCall(token, applicationId, modelId, _callback);
        return localVarCall;

    }

    /**
     * Get a model (admin only)
     * Get a model in the system that the application can access. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public Model adminGetModel(String token, String applicationId, String modelId) throws ApiException {
        ApiResponse<Model> localVarResp = adminGetModelWithHttpInfo(token, applicationId, modelId);
        return localVarResp.getData();
    }

    /**
     * Get a model (admin only)
     * Get a model in the system that the application can access. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model> adminGetModelWithHttpInfo(String token, String applicationId, String modelId) throws ApiException {
        okhttp3.Call localVarCall = adminGetModelValidateBeforeCall(token, applicationId, modelId, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a model (admin only) (asynchronously)
     * Get a model in the system that the application can access. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetModelAsync(String token, String applicationId, String modelId, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetModelValidateBeforeCall(token, applicationId, modelId, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetModelContents
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetModelContentsCall(String token, String applicationId, String modelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_id}/file_contents"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_id" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetModelContentsValidateBeforeCall(String token, String applicationId, String modelId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetModelContents(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminGetModelContents(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling adminGetModelContents(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetModelContentsCall(token, applicationId, modelId, _callback);
        return localVarCall;

    }

    /**
     * Get a model (admin only)
     * Get a model in the system that the application can access. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public File adminGetModelContents(String token, String applicationId, String modelId) throws ApiException {
        ApiResponse<File> localVarResp = adminGetModelContentsWithHttpInfo(token, applicationId, modelId);
        return localVarResp.getData();
    }

    /**
     * Get a model (admin only)
     * Get a model in the system that the application can access. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> adminGetModelContentsWithHttpInfo(String token, String applicationId, String modelId) throws ApiException {
        okhttp3.Call localVarCall = adminGetModelContentsValidateBeforeCall(token, applicationId, modelId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a model (admin only) (asynchronously)
     * Get a model in the system that the application can access. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to retrieve belongs (required)
     * @param modelId The id or the short name of the model to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetModelContentsAsync(String token, String applicationId, String modelId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetModelContentsValidateBeforeCall(token, applicationId, modelId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetModels
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param modelId The id of the models (optional)
     * @param applicationId The application that owns the models (optional)
     * @param modelType Filter by type (optional)
     * @param name Filter by name (optional)
     * @param shortName Filter by short name (optional)
     * @param description Gets models that contain this string in their description (optional)
     * @param inputTypes Filter by input type (optional)
     * @param tags If specified, filters the models by tag (optional)
     * @param createdAfter If specified, keeps only models created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only models created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param onlyMine If true, will list only models that strictly belong to application_id if present, or to connected application else (and not all the models that it can use) (false by default) (optional)
     * @param sort If specified, sorts the models by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;creation_time&#39;, &#39;name&#39;, &#39;description&#39;, &#39;model_type&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first model to send (pagination) (optional)
     * @param limit Maximum number of models to send (pagination) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model list. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: model max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetModelsCall(String token, String modelId, String applicationId, ModelTypes modelType, String name, String shortName, String description, List<ModelInputTypes> inputTypes, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean onlyMine, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_id", modelId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (modelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_type", modelType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (shortName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("short_name", shortName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (inputTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "input_types", inputTypes));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (onlyMine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("only_mine", onlyMine));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetModelsValidateBeforeCall(String token, String modelId, String applicationId, ModelTypes modelType, String name, String shortName, String description, List<ModelInputTypes> inputTypes, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean onlyMine, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetModels(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetModelsCall(token, modelId, applicationId, modelType, name, shortName, description, inputTypes, tags, createdAfter, createdBefore, onlyMine, sort, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Lists models (admin only) (paginated))
     * Lists all models. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param modelId The id of the models (optional)
     * @param applicationId The application that owns the models (optional)
     * @param modelType Filter by type (optional)
     * @param name Filter by name (optional)
     * @param shortName Filter by short name (optional)
     * @param description Gets models that contain this string in their description (optional)
     * @param inputTypes Filter by input type (optional)
     * @param tags If specified, filters the models by tag (optional)
     * @param createdAfter If specified, keeps only models created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only models created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param onlyMine If true, will list only models that strictly belong to application_id if present, or to connected application else (and not all the models that it can use) (false by default) (optional)
     * @param sort If specified, sorts the models by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;creation_time&#39;, &#39;name&#39;, &#39;description&#39;, &#39;model_type&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first model to send (pagination) (optional)
     * @param limit Maximum number of models to send (pagination) (optional)
     * @return List&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model list. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: model max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public List<Model> adminGetModels(String token, String modelId, String applicationId, ModelTypes modelType, String name, String shortName, String description, List<ModelInputTypes> inputTypes, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean onlyMine, String sort, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Model>> localVarResp = adminGetModelsWithHttpInfo(token, modelId, applicationId, modelType, name, shortName, description, inputTypes, tags, createdAfter, createdBefore, onlyMine, sort, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Lists models (admin only) (paginated))
     * Lists all models. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param modelId The id of the models (optional)
     * @param applicationId The application that owns the models (optional)
     * @param modelType Filter by type (optional)
     * @param name Filter by name (optional)
     * @param shortName Filter by short name (optional)
     * @param description Gets models that contain this string in their description (optional)
     * @param inputTypes Filter by input type (optional)
     * @param tags If specified, filters the models by tag (optional)
     * @param createdAfter If specified, keeps only models created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only models created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param onlyMine If true, will list only models that strictly belong to application_id if present, or to connected application else (and not all the models that it can use) (false by default) (optional)
     * @param sort If specified, sorts the models by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;creation_time&#39;, &#39;name&#39;, &#39;description&#39;, &#39;model_type&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first model to send (pagination) (optional)
     * @param limit Maximum number of models to send (pagination) (optional)
     * @return ApiResponse&lt;List&lt;Model&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model list. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: model max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Model>> adminGetModelsWithHttpInfo(String token, String modelId, String applicationId, ModelTypes modelType, String name, String shortName, String description, List<ModelInputTypes> inputTypes, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean onlyMine, String sort, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = adminGetModelsValidateBeforeCall(token, modelId, applicationId, modelType, name, shortName, description, inputTypes, tags, createdAfter, createdBefore, onlyMine, sort, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Model>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists models (admin only) (paginated)) (asynchronously)
     * Lists all models. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param modelId The id of the models (optional)
     * @param applicationId The application that owns the models (optional)
     * @param modelType Filter by type (optional)
     * @param name Filter by name (optional)
     * @param shortName Filter by short name (optional)
     * @param description Gets models that contain this string in their description (optional)
     * @param inputTypes Filter by input type (optional)
     * @param tags If specified, filters the models by tag (optional)
     * @param createdAfter If specified, keeps only models created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only models created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param onlyMine If true, will list only models that strictly belong to application_id if present, or to connected application else (and not all the models that it can use) (false by default) (optional)
     * @param sort If specified, sorts the models by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;creation_time&#39;, &#39;name&#39;, &#39;description&#39;, &#39;model_type&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first model to send (pagination) (optional)
     * @param limit Maximum number of models to send (pagination) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model list. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: model max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetModelsAsync(String token, String modelId, String applicationId, ModelTypes modelType, String name, String shortName, String description, List<ModelInputTypes> inputTypes, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean onlyMine, String sort, Integer offset, Integer limit, final ApiCallback<List<Model>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetModelsValidateBeforeCall(token, modelId, applicationId, modelType, name, shortName, description, inputTypes, tags, createdAfter, createdBefore, onlyMine, sort, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Model>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminTagModel
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to tag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to add to the model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTagModelCall(String token, String applicationId, String modelId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_id}/tag/{tag}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_id" + "\\}", localVarApiClient.escapeString(modelId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminTagModelValidateBeforeCall(String token, String applicationId, String modelId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminTagModel(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminTagModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling adminTagModel(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling adminTagModel(Async)");
        }
        

        okhttp3.Call localVarCall = adminTagModelCall(token, applicationId, modelId, tag, _callback);
        return localVarCall;

    }

    /**
     * Tags a model (admin only)
     * Tags a model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to tag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to add to the model (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public Model adminTagModel(String token, String applicationId, String modelId, String tag) throws ApiException {
        ApiResponse<Model> localVarResp = adminTagModelWithHttpInfo(token, applicationId, modelId, tag);
        return localVarResp.getData();
    }

    /**
     * Tags a model (admin only)
     * Tags a model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to tag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to add to the model (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model> adminTagModelWithHttpInfo(String token, String applicationId, String modelId, String tag) throws ApiException {
        okhttp3.Call localVarCall = adminTagModelValidateBeforeCall(token, applicationId, modelId, tag, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tags a model (admin only) (asynchronously)
     * Tags a model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to tag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to add to the model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTagModelAsync(String token, String applicationId, String modelId, String tag, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminTagModelValidateBeforeCall(token, applicationId, modelId, tag, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminTrainModelAsync
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelModule The module name of the model to train on documents (required)
     * @param documentsTag The tag of the documents to train with (required)
     * @param modelName The future name of the model in database (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the train method (optional)
     * @param trainBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a trainable model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Training documents not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTrainModelAsyncCall(String token, String applicationId, String modelModule, String documentsTag, String modelName, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, String executeAfterId, String callbackUrl, Object modelParams, TrainBody trainBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trainBody;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_module}/train/{documents_tag}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_module" + "\\}", localVarApiClient.escapeString(modelModule.toString()))
            .replaceAll("\\{" + "documents_tag" + "\\}", localVarApiClient.escapeString(documentsTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_name", modelName));
        }

        if (shortName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("short_name", shortName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (allowedApplicationIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "allowed_application_ids", allowedApplicationIds));
        }

        if (allowAllApplications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow_all_applications", allowAllApplications));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (executeAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execute_after_id", executeAfterId));
        }

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback_url", callbackUrl));
        }

        if (modelParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_params", modelParams));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminTrainModelAsyncValidateBeforeCall(String token, String applicationId, String modelModule, String documentsTag, String modelName, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, String executeAfterId, String callbackUrl, Object modelParams, TrainBody trainBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminTrainModelAsync(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminTrainModelAsync(Async)");
        }
        
        // verify the required parameter 'modelModule' is set
        if (modelModule == null) {
            throw new ApiException("Missing the required parameter 'modelModule' when calling adminTrainModelAsync(Async)");
        }
        
        // verify the required parameter 'documentsTag' is set
        if (documentsTag == null) {
            throw new ApiException("Missing the required parameter 'documentsTag' when calling adminTrainModelAsync(Async)");
        }
        

        okhttp3.Call localVarCall = adminTrainModelAsyncCall(token, applicationId, modelModule, documentsTag, modelName, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags, executeAfterId, callbackUrl, modelParams, trainBody, _callback);
        return localVarCall;

    }

    /**
     * Asynchronously trains a model on documents (admin only)
     * Asynchronously trains a model on accessible documents and returns a Job, that will have to be polled to get the model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelModule The module name of the model to train on documents (required)
     * @param documentsTag The tag of the documents to train with (required)
     * @param modelName The future name of the model in database (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the train method (optional)
     * @param trainBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a trainable model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Training documents not found </td><td>  -  </td></tr>
     </table>
     */
    public Job adminTrainModelAsync(String token, String applicationId, String modelModule, String documentsTag, String modelName, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, String executeAfterId, String callbackUrl, Object modelParams, TrainBody trainBody) throws ApiException {
        ApiResponse<Job> localVarResp = adminTrainModelAsyncWithHttpInfo(token, applicationId, modelModule, documentsTag, modelName, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags, executeAfterId, callbackUrl, modelParams, trainBody);
        return localVarResp.getData();
    }

    /**
     * Asynchronously trains a model on documents (admin only)
     * Asynchronously trains a model on accessible documents and returns a Job, that will have to be polled to get the model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelModule The module name of the model to train on documents (required)
     * @param documentsTag The tag of the documents to train with (required)
     * @param modelName The future name of the model in database (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the train method (optional)
     * @param trainBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a trainable model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Training documents not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> adminTrainModelAsyncWithHttpInfo(String token, String applicationId, String modelModule, String documentsTag, String modelName, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, String executeAfterId, String callbackUrl, Object modelParams, TrainBody trainBody) throws ApiException {
        okhttp3.Call localVarCall = adminTrainModelAsyncValidateBeforeCall(token, applicationId, modelModule, documentsTag, modelName, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags, executeAfterId, callbackUrl, modelParams, trainBody, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronously trains a model on documents (admin only) (asynchronously)
     * Asynchronously trains a model on accessible documents and returns a Job, that will have to be polled to get the model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model belongs (required)
     * @param modelModule The module name of the model to train on documents (required)
     * @param documentsTag The tag of the documents to train with (required)
     * @param modelName The future name of the model in database (optional)
     * @param shortName The new short name of the model (optional)
     * @param description The description of the model (optional)
     * @param ttl The TTL of the model in seconds, if running in worker mode (negative for infinite TTL, default is 200) (optional)
     * @param allowedApplicationIds The applications allowed to use this model (optional)
     * @param allowAllApplications Is this model allowed for everyone ? (optional)
     * @param tags The tags of the model (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param modelParams Additional parameters that will be passed as is to the train method (optional)
     * @param trainBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a trainable model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Training documents not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTrainModelAsyncAsync(String token, String applicationId, String modelModule, String documentsTag, String modelName, String shortName, String description, Integer ttl, List<String> allowedApplicationIds, Boolean allowAllApplications, List<String> tags, String executeAfterId, String callbackUrl, Object modelParams, TrainBody trainBody, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminTrainModelAsyncValidateBeforeCall(token, applicationId, modelModule, documentsTag, modelName, shortName, description, ttl, allowedApplicationIds, allowAllApplications, tags, executeAfterId, callbackUrl, modelParams, trainBody, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUntagModel
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to untag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to delete from the model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUntagModelCall(String token, String applicationId, String modelId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/model/{model_id}/tag/{tag}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "model_id" + "\\}", localVarApiClient.escapeString(modelId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUntagModelValidateBeforeCall(String token, String applicationId, String modelId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUntagModel(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminUntagModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling adminUntagModel(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling adminUntagModel(Async)");
        }
        

        okhttp3.Call localVarCall = adminUntagModelCall(token, applicationId, modelId, tag, _callback);
        return localVarCall;

    }

    /**
     * Untags a model (admin only)
     * Untags a model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to untag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to delete from the model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public void adminUntagModel(String token, String applicationId, String modelId, String tag) throws ApiException {
        adminUntagModelWithHttpInfo(token, applicationId, modelId, tag);
    }

    /**
     * Untags a model (admin only)
     * Untags a model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to untag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to delete from the model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminUntagModelWithHttpInfo(String token, String applicationId, String modelId, String tag) throws ApiException {
        okhttp3.Call localVarCall = adminUntagModelValidateBeforeCall(token, applicationId, modelId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Untags a model (admin only) (asynchronously)
     * Untags a model. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the model to untag belongs (required)
     * @param modelId The id of the model (required)
     * @param tag The tag to delete from the model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUntagModelAsync(String token, String applicationId, String modelId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUntagModelValidateBeforeCall(token, applicationId, modelId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
