/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sebastien.favre@docapost.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.Worker;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerApi {
    private ApiClient localVarApiClient;

    public WorkerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getWorker
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to get worker info (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkerCall(String token, String jobType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worker/{job_type}"
            .replaceAll("\\{" + "job_type" + "\\}", localVarApiClient.escapeString(jobType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerValidateBeforeCall(String token, String jobType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getWorker(Async)");
        }
        
        // verify the required parameter 'jobType' is set
        if (jobType == null) {
            throw new ApiException("Missing the required parameter 'jobType' when calling getWorker(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkerCall(token, jobType, _callback);
        return localVarCall;

    }

    /**
     * Retrieves worker information from Leia API
     * Retrieves worker information from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to get worker info (required)
     * @return Worker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public Worker getWorker(String token, String jobType) throws ApiException {
        ApiResponse<Worker> localVarResp = getWorkerWithHttpInfo(token, jobType);
        return localVarResp.getData();
    }

    /**
     * Retrieves worker information from Leia API
     * Retrieves worker information from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to get worker info (required)
     * @return ApiResponse&lt;Worker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Worker> getWorkerWithHttpInfo(String token, String jobType) throws ApiException {
        okhttp3.Call localVarCall = getWorkerValidateBeforeCall(token, jobType, null);
        Type localVarReturnType = new TypeToken<Worker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves worker information from Leia API (asynchronously)
     * Retrieves worker information from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to get worker info (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkerAsync(String token, String jobType, final ApiCallback<Worker> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerValidateBeforeCall(token, jobType, _callback);
        Type localVarReturnType = new TypeToken<Worker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkers
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkersCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkersValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getWorkers(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkersCall(token, _callback);
        return localVarCall;

    }

    /**
     * Retrieves worker information from Leia API
     * Retrieves worker information from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @return List&lt;Worker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public List<Worker> getWorkers(String token) throws ApiException {
        ApiResponse<List<Worker>> localVarResp = getWorkersWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Retrieves worker information from Leia API
     * Retrieves worker information from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @return ApiResponse&lt;List&lt;Worker&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Worker>> getWorkersWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = getWorkersValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<List<Worker>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves worker information from Leia API (asynchronously)
     * Retrieves worker information from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved worker information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkersAsync(String token, final ApiCallback<List<Worker>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkersValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<List<Worker>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
