/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@leia.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.Application;
import io.leia.client.model.LoginBody;
import io.leia.client.model.LoginToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationApi {
    private ApiClient localVarApiClient;

    public ApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for loginApplication
     * @param apiKey The API key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApplicationCall(String apiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/login/{api_key}"
            .replaceAll("\\{" + "api_key" + "\\}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginApplicationValidateBeforeCall(String apiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling loginApplication(Async)");
        }
        

        okhttp3.Call localVarCall = loginApplicationCall(apiKey, _callback);
        return localVarCall;

    }

    /**
     * (DEPRECATED) Logs into Leia API
     * /!\\ DEPRECATED, use POST /login instead. Logs an application into Leia API using its API key. Returns a token that will have to be set in all subsequent requests, to identify the logged in application 
     * @param apiKey The API key (required)
     * @return LoginToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public LoginToken loginApplication(String apiKey) throws ApiException {
        ApiResponse<LoginToken> localVarResp = loginApplicationWithHttpInfo(apiKey);
        return localVarResp.getData();
    }

    /**
     * (DEPRECATED) Logs into Leia API
     * /!\\ DEPRECATED, use POST /login instead. Logs an application into Leia API using its API key. Returns a token that will have to be set in all subsequent requests, to identify the logged in application 
     * @param apiKey The API key (required)
     * @return ApiResponse&lt;LoginToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginToken> loginApplicationWithHttpInfo(String apiKey) throws ApiException {
        okhttp3.Call localVarCall = loginApplicationValidateBeforeCall(apiKey, null);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (DEPRECATED) Logs into Leia API (asynchronously)
     * /!\\ DEPRECATED, use POST /login instead. Logs an application into Leia API using its API key. Returns a token that will have to be set in all subsequent requests, to identify the logged in application 
     * @param apiKey The API key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApplicationAsync(String apiKey, final ApiCallback<LoginToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginApplicationValidateBeforeCall(apiKey, _callback);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginApplicationPost
     * @param loginBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApplicationPostCall(LoginBody loginBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loginBody;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginApplicationPostValidateBeforeCall(LoginBody loginBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loginBody' is set
        if (loginBody == null) {
            throw new ApiException("Missing the required parameter 'loginBody' when calling loginApplicationPost(Async)");
        }
        

        okhttp3.Call localVarCall = loginApplicationPostCall(loginBody, _callback);
        return localVarCall;

    }

    /**
     * Logs into Leia API
     * Logs an application into Leia API using its API key. Returns a token that will have to be set in all subsequent requests, to identify the logged in application 
     * @param loginBody  (required)
     * @return LoginToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public LoginToken loginApplicationPost(LoginBody loginBody) throws ApiException {
        ApiResponse<LoginToken> localVarResp = loginApplicationPostWithHttpInfo(loginBody);
        return localVarResp.getData();
    }

    /**
     * Logs into Leia API
     * Logs an application into Leia API using its API key. Returns a token that will have to be set in all subsequent requests, to identify the logged in application 
     * @param loginBody  (required)
     * @return ApiResponse&lt;LoginToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginToken> loginApplicationPostWithHttpInfo(LoginBody loginBody) throws ApiException {
        okhttp3.Call localVarCall = loginApplicationPostValidateBeforeCall(loginBody, null);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logs into Leia API (asynchronously)
     * Logs an application into Leia API using its API key. Returns a token that will have to be set in all subsequent requests, to identify the logged in application 
     * @param loginBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A token for future requests </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApplicationPostAsync(LoginBody loginBody, final ApiCallback<LoginToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginApplicationPostValidateBeforeCall(loginBody, _callback);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logoutApplication
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutApplicationCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutApplicationValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling logoutApplication(Async)");
        }
        

        okhttp3.Call localVarCall = logoutApplicationCall(token, _callback);
        return localVarCall;

    }

    /**
     * Logs out from Leia API
     * Logs a connected application out of Leia API using its token 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public void logoutApplication(String token) throws ApiException {
        logoutApplicationWithHttpInfo(token);
    }

    /**
     * Logs out from Leia API
     * Logs a connected application out of Leia API using its token 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logoutApplicationWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = logoutApplicationValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Logs out from Leia API (asynchronously)
     * Logs a connected application out of Leia API using its token 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutApplicationAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutApplicationValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for whoAmI
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently connected application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whoAmICall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whoami";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call whoAmIValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling whoAmI(Async)");
        }
        

        okhttp3.Call localVarCall = whoAmICall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the currently connected application
     * Gets the currently connected application. Also use this method to reset token timeout 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently connected application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public Application whoAmI(String token) throws ApiException {
        ApiResponse<Application> localVarResp = whoAmIWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Gets the currently connected application
     * Gets the currently connected application. Also use this method to reset token timeout 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently connected application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> whoAmIWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = whoAmIValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the currently connected application (asynchronously)
     * Gets the currently connected application. Also use this method to reset token timeout 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently connected application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whoAmIAsync(String token, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = whoAmIValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
