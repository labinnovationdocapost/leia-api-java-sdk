/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sebastien.favre@docapost.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.Application;
import io.leia.client.model.ApplicationTypes;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationAdminApi {
    private ApiClient localVarApiClient;

    public ApplicationAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for adminCreateApplication
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param application  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An existing application already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateApplicationCall(String token, Application application, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = application;

        // create path and map variables
        String localVarPath = "/admin/application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminCreateApplicationValidateBeforeCall(String token, Application application, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminCreateApplication(Async)");
        }
        

        okhttp3.Call localVarCall = adminCreateApplicationCall(token, application, _callback);
        return localVarCall;

    }

    /**
     * Adds a new application to the system (admin only)
     * Adds a new application to the system. This method is only accessible to admins. An API key will be generated for the new application when calling this method. Note or store it carefully, it will not be recoverable after this call.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param application  (optional)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An existing application already exists </td><td>  -  </td></tr>
     </table>
     */
    public Application adminCreateApplication(String token, Application application) throws ApiException {
        ApiResponse<Application> localVarResp = adminCreateApplicationWithHttpInfo(token, application);
        return localVarResp.getData();
    }

    /**
     * Adds a new application to the system (admin only)
     * Adds a new application to the system. This method is only accessible to admins. An API key will be generated for the new application when calling this method. Note or store it carefully, it will not be recoverable after this call.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param application  (optional)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An existing application already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> adminCreateApplicationWithHttpInfo(String token, Application application) throws ApiException {
        okhttp3.Call localVarCall = adminCreateApplicationValidateBeforeCall(token, application, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new application to the system (admin only) (asynchronously)
     * Adds a new application to the system. This method is only accessible to admins. An API key will be generated for the new application when calling this method. Note or store it carefully, it will not be recoverable after this call.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param application  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An existing application already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateApplicationAsync(String token, Application application, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminCreateApplicationValidateBeforeCall(token, application, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminDeleteApplication
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Application still has documents/annotations/models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteApplicationCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/application/{application_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDeleteApplicationValidateBeforeCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminDeleteApplication(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminDeleteApplication(Async)");
        }
        

        okhttp3.Call localVarCall = adminDeleteApplicationCall(token, applicationId, _callback);
        return localVarCall;

    }

    /**
     * Deletes an application (admin only)
     * Retrieves a new application from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Application still has documents/annotations/models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public void adminDeleteApplication(String token, String applicationId) throws ApiException {
        adminDeleteApplicationWithHttpInfo(token, applicationId);
    }

    /**
     * Deletes an application (admin only)
     * Retrieves a new application from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Application still has documents/annotations/models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminDeleteApplicationWithHttpInfo(String token, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = adminDeleteApplicationValidateBeforeCall(token, applicationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an application (admin only) (asynchronously)
     * Retrieves a new application from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Application still has documents/annotations/models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteApplicationAsync(String token, String applicationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDeleteApplicationValidateBeforeCall(token, applicationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminEditApplication
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to modify (required)
     * @param defaultJobCallbackUrl The new default_job_callback_url of the application (optional)
     * @param dedicatedWorkers Should this application use dedicated workers ? (optional)
     * @param dedicatedWorkersTtl When using dedicated workers, TTL of the worker (in seconds) (optional)
     * @param reduceCallbackPayloads Specifies if the callback should be sent as is, or if the potential base64 encoded documents generated should be saved as sub documents of the original document (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEditApplicationCall(String token, String applicationId, String defaultJobCallbackUrl, Boolean dedicatedWorkers, Integer dedicatedWorkersTtl, Boolean reduceCallbackPayloads, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/application/{application_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (defaultJobCallbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("default_job_callback_url", defaultJobCallbackUrl));
        }

        if (dedicatedWorkers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedicated_workers", dedicatedWorkers));
        }

        if (dedicatedWorkersTtl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedicated_workers_ttl", dedicatedWorkersTtl));
        }

        if (reduceCallbackPayloads != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reduce_callback_payloads", reduceCallbackPayloads));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminEditApplicationValidateBeforeCall(String token, String applicationId, String defaultJobCallbackUrl, Boolean dedicatedWorkers, Integer dedicatedWorkersTtl, Boolean reduceCallbackPayloads, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminEditApplication(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminEditApplication(Async)");
        }
        

        okhttp3.Call localVarCall = adminEditApplicationCall(token, applicationId, defaultJobCallbackUrl, dedicatedWorkers, dedicatedWorkersTtl, reduceCallbackPayloads, _callback);
        return localVarCall;

    }

    /**
     * Modifies an existing application in the system (admin only)
     * Modifies an application already in the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to modify (required)
     * @param defaultJobCallbackUrl The new default_job_callback_url of the application (optional)
     * @param dedicatedWorkers Should this application use dedicated workers ? (optional)
     * @param dedicatedWorkersTtl When using dedicated workers, TTL of the worker (in seconds) (optional)
     * @param reduceCallbackPayloads Specifies if the callback should be sent as is, or if the potential base64 encoded documents generated should be saved as sub documents of the original document (optional)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public Application adminEditApplication(String token, String applicationId, String defaultJobCallbackUrl, Boolean dedicatedWorkers, Integer dedicatedWorkersTtl, Boolean reduceCallbackPayloads) throws ApiException {
        ApiResponse<Application> localVarResp = adminEditApplicationWithHttpInfo(token, applicationId, defaultJobCallbackUrl, dedicatedWorkers, dedicatedWorkersTtl, reduceCallbackPayloads);
        return localVarResp.getData();
    }

    /**
     * Modifies an existing application in the system (admin only)
     * Modifies an application already in the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to modify (required)
     * @param defaultJobCallbackUrl The new default_job_callback_url of the application (optional)
     * @param dedicatedWorkers Should this application use dedicated workers ? (optional)
     * @param dedicatedWorkersTtl When using dedicated workers, TTL of the worker (in seconds) (optional)
     * @param reduceCallbackPayloads Specifies if the callback should be sent as is, or if the potential base64 encoded documents generated should be saved as sub documents of the original document (optional)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> adminEditApplicationWithHttpInfo(String token, String applicationId, String defaultJobCallbackUrl, Boolean dedicatedWorkers, Integer dedicatedWorkersTtl, Boolean reduceCallbackPayloads) throws ApiException {
        okhttp3.Call localVarCall = adminEditApplicationValidateBeforeCall(token, applicationId, defaultJobCallbackUrl, dedicatedWorkers, dedicatedWorkersTtl, reduceCallbackPayloads, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifies an existing application in the system (admin only) (asynchronously)
     * Modifies an application already in the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to modify (required)
     * @param defaultJobCallbackUrl The new default_job_callback_url of the application (optional)
     * @param dedicatedWorkers Should this application use dedicated workers ? (optional)
     * @param dedicatedWorkersTtl When using dedicated workers, TTL of the worker (in seconds) (optional)
     * @param reduceCallbackPayloads Specifies if the callback should be sent as is, or if the potential base64 encoded documents generated should be saved as sub documents of the original document (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEditApplicationAsync(String token, String applicationId, String defaultJobCallbackUrl, Boolean dedicatedWorkers, Integer dedicatedWorkersTtl, Boolean reduceCallbackPayloads, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminEditApplicationValidateBeforeCall(token, applicationId, defaultJobCallbackUrl, dedicatedWorkers, dedicatedWorkersTtl, reduceCallbackPayloads, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetApplication
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetApplicationCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/application/{application_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetApplicationValidateBeforeCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetApplication(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminGetApplication(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetApplicationCall(token, applicationId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves an application (admin only)
     * Retrieves a new application from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to retrieve (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public Application adminGetApplication(String token, String applicationId) throws ApiException {
        ApiResponse<Application> localVarResp = adminGetApplicationWithHttpInfo(token, applicationId);
        return localVarResp.getData();
    }

    /**
     * Retrieves an application (admin only)
     * Retrieves a new application from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to retrieve (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> adminGetApplicationWithHttpInfo(String token, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = adminGetApplicationValidateBeforeCall(token, applicationId, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an application (admin only) (asynchronously)
     * Retrieves a new application from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved application </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetApplicationAsync(String token, String applicationId, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetApplicationValidateBeforeCall(token, applicationId, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetApplications
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId If specified, filters by application id (optional)
     * @param email If specified, filters by application email (optional)
     * @param applicationName If specified, filters by application name (optional)
     * @param firstName If specified, filters by application first_name (optional)
     * @param lastName If specified, filters by application last_name (optional)
     * @param applicationType If specified, filters by application application_type (optional)
     * @param createdAfter If specified, keeps only applications created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only applications created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param dedicatedWorkers If specified, filters by dedicated_workers value (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param sort If specified, sorts the applications by a list of existing parameters separated by commas. Can be &#39;application_name&#39;, &#39;application_type&#39;, &#39;creation_time&#39;, &#39;first_name&#39;, &#39;last_name&#39;, &#39;email&#39;, &#39;dedicated_workers&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved applications. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: application max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetApplicationsCall(String token, String applicationId, String email, String applicationName, String firstName, String lastName, ApplicationTypes applicationType, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean dedicatedWorkers, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_name", applicationName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (applicationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_type", applicationType));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (dedicatedWorkers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedicated_workers", dedicatedWorkers));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetApplicationsValidateBeforeCall(String token, String applicationId, String email, String applicationName, String firstName, String lastName, ApplicationTypes applicationType, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean dedicatedWorkers, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetApplications(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetApplicationsCall(token, applicationId, email, applicationName, firstName, lastName, applicationType, createdAfter, createdBefore, dedicatedWorkers, offset, limit, sort, _callback);
        return localVarCall;

    }

    /**
     * Retrieves applications (admin only) (paginated)
     * Retrieves applications from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId If specified, filters by application id (optional)
     * @param email If specified, filters by application email (optional)
     * @param applicationName If specified, filters by application name (optional)
     * @param firstName If specified, filters by application first_name (optional)
     * @param lastName If specified, filters by application last_name (optional)
     * @param applicationType If specified, filters by application application_type (optional)
     * @param createdAfter If specified, keeps only applications created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only applications created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param dedicatedWorkers If specified, filters by dedicated_workers value (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param sort If specified, sorts the applications by a list of existing parameters separated by commas. Can be &#39;application_name&#39;, &#39;application_type&#39;, &#39;creation_time&#39;, &#39;first_name&#39;, &#39;last_name&#39;, &#39;email&#39;, &#39;dedicated_workers&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved applications. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: application max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> adminGetApplications(String token, String applicationId, String email, String applicationName, String firstName, String lastName, ApplicationTypes applicationType, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean dedicatedWorkers, Integer offset, Integer limit, String sort) throws ApiException {
        ApiResponse<List<Application>> localVarResp = adminGetApplicationsWithHttpInfo(token, applicationId, email, applicationName, firstName, lastName, applicationType, createdAfter, createdBefore, dedicatedWorkers, offset, limit, sort);
        return localVarResp.getData();
    }

    /**
     * Retrieves applications (admin only) (paginated)
     * Retrieves applications from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId If specified, filters by application id (optional)
     * @param email If specified, filters by application email (optional)
     * @param applicationName If specified, filters by application name (optional)
     * @param firstName If specified, filters by application first_name (optional)
     * @param lastName If specified, filters by application last_name (optional)
     * @param applicationType If specified, filters by application application_type (optional)
     * @param createdAfter If specified, keeps only applications created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only applications created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param dedicatedWorkers If specified, filters by dedicated_workers value (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param sort If specified, sorts the applications by a list of existing parameters separated by commas. Can be &#39;application_name&#39;, &#39;application_type&#39;, &#39;creation_time&#39;, &#39;first_name&#39;, &#39;last_name&#39;, &#39;email&#39;, &#39;dedicated_workers&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved applications. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: application max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> adminGetApplicationsWithHttpInfo(String token, String applicationId, String email, String applicationName, String firstName, String lastName, ApplicationTypes applicationType, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean dedicatedWorkers, Integer offset, Integer limit, String sort) throws ApiException {
        okhttp3.Call localVarCall = adminGetApplicationsValidateBeforeCall(token, applicationId, email, applicationName, firstName, lastName, applicationType, createdAfter, createdBefore, dedicatedWorkers, offset, limit, sort, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves applications (admin only) (paginated) (asynchronously)
     * Retrieves applications from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId If specified, filters by application id (optional)
     * @param email If specified, filters by application email (optional)
     * @param applicationName If specified, filters by application name (optional)
     * @param firstName If specified, filters by application first_name (optional)
     * @param lastName If specified, filters by application last_name (optional)
     * @param applicationType If specified, filters by application application_type (optional)
     * @param createdAfter If specified, keeps only applications created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only applications created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param dedicatedWorkers If specified, filters by dedicated_workers value (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param sort If specified, sorts the applications by a list of existing parameters separated by commas. Can be &#39;application_name&#39;, &#39;application_type&#39;, &#39;creation_time&#39;, &#39;first_name&#39;, &#39;last_name&#39;, &#39;email&#39;, &#39;dedicated_workers&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved applications. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: application max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetApplicationsAsync(String token, String applicationId, String email, String applicationName, String firstName, String lastName, ApplicationTypes applicationType, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Boolean dedicatedWorkers, Integer offset, Integer limit, String sort, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetApplicationsValidateBeforeCall(token, applicationId, email, applicationName, firstName, lastName, applicationType, createdAfter, createdBefore, dedicatedWorkers, offset, limit, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminResetApiKey
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to reset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cannot reset your own api key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No application found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminResetApiKeyCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/application/{application_id}/reset_api_key"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminResetApiKeyValidateBeforeCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminResetApiKey(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminResetApiKey(Async)");
        }
        

        okhttp3.Call localVarCall = adminResetApiKeyCall(token, applicationId, _callback);
        return localVarCall;

    }

    /**
     * Resets an API key (admin only)
     * Resets the API key of the application corresponding to application_id, and returns a new one. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to reset (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cannot reset your own api key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No application found </td><td>  -  </td></tr>
     </table>
     */
    public Application adminResetApiKey(String token, String applicationId) throws ApiException {
        ApiResponse<Application> localVarResp = adminResetApiKeyWithHttpInfo(token, applicationId);
        return localVarResp.getData();
    }

    /**
     * Resets an API key (admin only)
     * Resets the API key of the application corresponding to application_id, and returns a new one. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to reset (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cannot reset your own api key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No application found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> adminResetApiKeyWithHttpInfo(String token, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = adminResetApiKeyValidateBeforeCall(token, applicationId, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resets an API key (admin only) (asynchronously)
     * Resets the API key of the application corresponding to application_id, and returns a new one. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The id of the application to reset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid application data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cannot reset your own api key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No application found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminResetApiKeyAsync(String token, String applicationId, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminResetApiKeyValidateBeforeCall(token, applicationId, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
