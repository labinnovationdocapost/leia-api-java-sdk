/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sebastien.favre@docapost.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.Job;
import io.leia.client.model.JobTypes;
import java.time.OffsetDateTime;
import io.leia.client.model.Statuses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobApi {
    private ApiClient localVarApiClient;

    public JobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelJob
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelJobCall(String token, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{job_id}"
            .replaceAll("\\{" + "job_id" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelJobValidateBeforeCall(String token, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling cancelJob(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling cancelJob(Async)");
        }
        

        okhttp3.Call localVarCall = cancelJobCall(token, jobId, _callback);
        return localVarCall;

    }

    /**
     * Cancels a job in Leia API
     * Cancels a job in Leia API (This will not really delete it, just mark it as cancelled, so dependent jobs will fail) 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public void cancelJob(String token, String jobId) throws ApiException {
        cancelJobWithHttpInfo(token, jobId);
    }

    /**
     * Cancels a job in Leia API
     * Cancels a job in Leia API (This will not really delete it, just mark it as cancelled, so dependent jobs will fail) 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelJobWithHttpInfo(String token, String jobId) throws ApiException {
        okhttp3.Call localVarCall = cancelJobValidateBeforeCall(token, jobId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancels a job in Leia API (asynchronously)
     * Cancels a job in Leia API (This will not really delete it, just mark it as cancelled, so dependent jobs will fail) 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelJobAsync(String token, String jobId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelJobValidateBeforeCall(token, jobId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJob
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobCall(String token, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{job_id}"
            .replaceAll("\\{" + "job_id" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(String token, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getJob(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJob(Async)");
        }
        

        okhttp3.Call localVarCall = getJobCall(token, jobId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a job from Leia API
     * Retrieves a job from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to retrieve (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public Job getJob(String token, String jobId) throws ApiException {
        ApiResponse<Job> localVarResp = getJobWithHttpInfo(token, jobId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a job from Leia API
     * Retrieves a job from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to retrieve (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> getJobWithHttpInfo(String token, String jobId) throws ApiException {
        okhttp3.Call localVarCall = getJobValidateBeforeCall(token, jobId, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a job from Leia API (asynchronously)
     * Retrieves a job from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAsync(String token, String jobId, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobValidateBeforeCall(token, jobId, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobStatuses
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobStatusesCall(String token, List<String> jobIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{job_ids}/status"
            .replaceAll("\\{" + "job_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", jobIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobStatusesValidateBeforeCall(String token, List<String> jobIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getJobStatuses(Async)");
        }
        
        // verify the required parameter 'jobIds' is set
        if (jobIds == null) {
            throw new ApiException("Missing the required parameter 'jobIds' when calling getJobStatuses(Async)");
        }
        

        okhttp3.Call localVarCall = getJobStatusesCall(token, jobIds, _callback);
        return localVarCall;

    }

    /**
     * Retrieves job statuses from Leia API
     * Retrieves a list of job statuses from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @return Map&lt;String, Statuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Statuses> getJobStatuses(String token, List<String> jobIds) throws ApiException {
        ApiResponse<Map<String, Statuses>> localVarResp = getJobStatusesWithHttpInfo(token, jobIds);
        return localVarResp.getData();
    }

    /**
     * Retrieves job statuses from Leia API
     * Retrieves a list of job statuses from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @return ApiResponse&lt;Map&lt;String, Statuses&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Statuses>> getJobStatusesWithHttpInfo(String token, List<String> jobIds) throws ApiException {
        okhttp3.Call localVarCall = getJobStatusesValidateBeforeCall(token, jobIds, null);
        Type localVarReturnType = new TypeToken<Map<String, Statuses>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves job statuses from Leia API (asynchronously)
     * Retrieves a list of job statuses from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobStatusesAsync(String token, List<String> jobIds, final ApiCallback<Map<String, Statuses>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobStatusesValidateBeforeCall(token, jobIds, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Statuses>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(String token, String jobId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (jobType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_type", jobType));
        }

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_id", modelId));
        }

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (executeAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execute_after_id", executeAfterId));
        }

        if (parentJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_job_id", parentJobId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(String token, String jobId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getJobs(Async)");
        }
        

        okhttp3.Call localVarCall = getJobsCall(token, jobId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Retrieves jobs (paginated)
     * Get jobs from the system.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @return List&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public List<Job> getJobs(String token, String jobId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Job>> localVarResp = getJobsWithHttpInfo(token, jobId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieves jobs (paginated)
     * Get jobs from the system.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @return ApiResponse&lt;List&lt;Job&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Job>> getJobsWithHttpInfo(String token, String jobId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(token, jobId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves jobs (paginated) (asynchronously)
     * Get jobs from the system.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(String token, String jobId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit, final ApiCallback<List<Job>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(token, jobId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
