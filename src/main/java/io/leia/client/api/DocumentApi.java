/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sebastien.favre@docapost.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.Document;
import java.io.File;
import io.leia.client.model.Job;

import java.io.InputStream;
import java.time.OffsetDateTime;
import io.leia.client.model.TransformBody;
import io.leia.client.model.TransformTypes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param b64 Set to true if the body is b64 encoded (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentCall(String token, String filename, InputStream body, Boolean b64, Integer ttl, List<String> tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (b64 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("b64", b64));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentValidateBeforeCall(String token, String filename, InputStream body, Boolean b64, Integer ttl, List<String> tags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling createDocument(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling createDocument(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDocument(Async)");
        }
        

        okhttp3.Call localVarCall = createDocumentCall(token, filename, body, b64, ttl, tags, _callback);
        return localVarCall;

    }

    /**
     * Uploads a document to the Leia API
     * Uploads a document to Leia API for future use 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param b64 Set to true if the body is b64 encoded (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public Document createDocument(String token, String filename, InputStream body, Boolean b64, Integer ttl, List<String> tags) throws ApiException {
        ApiResponse<Document> localVarResp = createDocumentWithHttpInfo(token, filename, body, b64, ttl, tags);
        return localVarResp.getData();
    }

    /**
     * Uploads a document to the Leia API
     * Uploads a document to Leia API for future use 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param b64 Set to true if the body is b64 encoded (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> createDocumentWithHttpInfo(String token, String filename, InputStream body, Boolean b64, Integer ttl, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(token, filename, body, b64, ttl, tags, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Uploads a document to the Leia API (asynchronously)
     * Uploads a document to Leia API for future use 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param b64 Set to true if the body is b64 encoded (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentAsync(String token, String filename, InputStream body, Boolean b64, Integer ttl, List<String> tags, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(token, filename, body, b64, ttl, tags, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(String token, String documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(String token, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocument(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDocumentCall(token, documentId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a document from Leia API
     * Deletes a document from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocument(String token, String documentId) throws ApiException {
        deleteDocumentWithHttpInfo(token, documentId);
    }

    /**
     * Deletes a document from Leia API
     * Deletes a document from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(String token, String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(token, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a document from Leia API (asynchronously)
     * Deletes a document from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(String token, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(token, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editDocumentCall(String token, String documentId, String filename, Integer rotationAngle, Integer ttl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (rotationAngle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rotation_angle", rotationAngle));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editDocumentValidateBeforeCall(String token, String documentId, String filename, Integer rotationAngle, Integer ttl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling editDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling editDocument(Async)");
        }
        

        okhttp3.Call localVarCall = editDocumentCall(token, documentId, filename, rotationAngle, ttl, _callback);
        return localVarCall;

    }

    /**
     * Updates a document in Leia API
     * Updates metadata for a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Document editDocument(String token, String documentId, String filename, Integer rotationAngle, Integer ttl) throws ApiException {
        ApiResponse<Document> localVarResp = editDocumentWithHttpInfo(token, documentId, filename, rotationAngle, ttl);
        return localVarResp.getData();
    }

    /**
     * Updates a document in Leia API
     * Updates metadata for a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> editDocumentWithHttpInfo(String token, String documentId, String filename, Integer rotationAngle, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = editDocumentValidateBeforeCall(token, documentId, filename, rotationAngle, ttl, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a document in Leia API (asynchronously)
     * Updates metadata for a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editDocumentAsync(String token, String documentId, String filename, Integer rotationAngle, Integer ttl, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = editDocumentValidateBeforeCall(token, documentId, filename, rotationAngle, ttl, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentCall(String token, String documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentValidateBeforeCall(String token, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocument(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentCall(token, documentId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a document from Leia API
     * Retrieves metadata for a document from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Document getDocument(String token, String documentId) throws ApiException {
        ApiResponse<Document> localVarResp = getDocumentWithHttpInfo(token, documentId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a document from Leia API
     * Retrieves metadata for a document from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> getDocumentWithHttpInfo(String token, String documentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(token, documentId, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a document from Leia API (asynchronously)
     * Retrieves metadata for a document from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAsync(String token, String documentId, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(token, documentId, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentContents
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentContentsCall(String token, String documentId, Integer maxSize, Integer jpegCompression, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{document_id}/file_contents"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_size", maxSize));
        }

        if (jpegCompression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jpeg_compression", jpegCompression));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentContentsValidateBeforeCall(String token, String documentId, Integer maxSize, Integer jpegCompression, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getDocumentContents(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentContents(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentContentsCall(token, documentId, maxSize, jpegCompression, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a document from Leia API
     * Retrieves a document&#39;s binary content from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public InputStream getDocumentContents(String token, String documentId, Integer maxSize, Integer jpegCompression) throws ApiException {
        ApiResponse<InputStream> localVarResp = getDocumentContentsWithHttpInfo(token, documentId, maxSize, jpegCompression);
        return localVarResp.getData();
    }

    /**
     * Retrieves a document from Leia API
     * Retrieves a document&#39;s binary content from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InputStream> getDocumentContentsWithHttpInfo(String token, String documentId, Integer maxSize, Integer jpegCompression) throws ApiException {
        okhttp3.Call localVarCall = getDocumentContentsValidateBeforeCall(token, documentId, maxSize, jpegCompression, null);
        Type localVarReturnType = new TypeToken<InputStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a document from Leia API (asynchronously)
     * Retrieves a document&#39;s binary content from Leia API 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentContentsAsync(String token, String documentId, Integer maxSize, Integer jpegCompression, final ApiCallback<InputStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentContentsValidateBeforeCall(token, documentId, maxSize, jpegCompression, _callback);
        Type localVarReturnType = new TypeToken<InputStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocuments
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsCall(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (extension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extension", extension));
        }

        if (mimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mime_type", mimeType));
        }

        if (originalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("original_id", originalId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (tagResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_result", tagResult));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsValidateBeforeCall(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentsCall(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Retrieves documents from Leia API (paginated)
     * Retrieves documents which matches the query from Leia API as JSON metadata
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @return List&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Document> getDocuments(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Document>> localVarResp = getDocumentsWithHttpInfo(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieves documents from Leia API (paginated)
     * Retrieves documents which matches the query from Leia API as JSON metadata
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @return ApiResponse&lt;List&lt;Document&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Document>> getDocumentsWithHttpInfo(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves documents from Leia API (paginated) (asynchronously)
     * Retrieves documents which matches the query from Leia API as JSON metadata
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsAsync(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit, final ApiCallback<List<Document>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentsTags
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTagsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/tag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsTagsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getDocumentsTags(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentsTagsCall(token, _callback);
        return localVarCall;

    }

    /**
     * Retrieves documents&#39; tags from Leia API
     * Retrieves tags from documents that the application can access.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getDocumentsTags(String token) throws ApiException {
        ApiResponse<List<String>> localVarResp = getDocumentsTagsWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Retrieves documents&#39; tags from Leia API
     * Retrieves tags from documents that the application can access.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getDocumentsTagsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsTagsValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves documents&#39; tags from Leia API (asynchronously)
     * Retrieves tags from documents that the application can access.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTagsAsync(String token, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsTagsValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentsZip
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents in a zip file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsZipCall(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/zip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (extension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extension", extension));
        }

        if (mimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mime_type", mimeType));
        }

        if (originalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("original_id", originalId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsZipValidateBeforeCall(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getDocumentsZip(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentsZipCall(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, _callback);
        return localVarCall;

    }

    /**
     * Retrieves documents from Leia API (paginated)
     * Retrieves documents which matches the query from Leia API in a zip file
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents in a zip file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public InputStream getDocumentsZip(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore) throws ApiException {
        ApiResponse<InputStream> localVarResp = getDocumentsZipWithHttpInfo(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Retrieves documents from Leia API (paginated)
     * Retrieves documents which matches the query from Leia API in a zip file
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents in a zip file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InputStream> getDocumentsZipWithHttpInfo(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsZipValidateBeforeCall(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<InputStream>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves documents from Leia API (paginated) (asynchronously)
     * Retrieves documents which matches the query from Leia API in a zip file
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id the document to retrieve (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents in a zip file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least of filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsZipAsync(String token, String documentId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, final ApiCallback<InputStream> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsZipValidateBeforeCall(token, documentId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<InputStream>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagDocumentCall(String token, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{document_id}/tag/{tag}"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagDocumentValidateBeforeCall(String token, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling tagDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling tagDocument(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling tagDocument(Async)");
        }
        

        okhttp3.Call localVarCall = tagDocumentCall(token, documentId, tag, _callback);
        return localVarCall;

    }

    /**
     * Tags a document
     * Tags a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Document tagDocument(String token, String documentId, String tag) throws ApiException {
        ApiResponse<Document> localVarResp = tagDocumentWithHttpInfo(token, documentId, tag);
        return localVarResp.getData();
    }

    /**
     * Tags a document
     * Tags a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> tagDocumentWithHttpInfo(String token, String documentId, String tag) throws ApiException {
        okhttp3.Call localVarCall = tagDocumentValidateBeforeCall(token, documentId, tag, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tags a document (asynchronously)
     * Tags a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagDocumentAsync(String token, String documentId, String tag, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagDocumentValidateBeforeCall(token, documentId, tag, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformDocumentAsync
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformDocumentAsyncCall(String token, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String callbackUrl, Object transformParams, TransformBody transformBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transformBody;

        // create path and map variables
        String localVarPath = "/document/{document_ids}/transform/{output_type}"
            .replaceAll("\\{" + "document_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", documentIds)))
            .replaceAll("\\{" + "output_type" + "\\}", localVarApiClient.escapeString(outputType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input_tag", inputTag));
        }

        if (outputTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output_tag", outputTag));
        }

        if (executeAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execute_after_id", executeAfterId));
        }

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback_url", callbackUrl));
        }

        if (transformParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transform_params", transformParams));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformDocumentAsyncValidateBeforeCall(String token, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String callbackUrl, Object transformParams, TransformBody transformBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transformDocumentAsync(Async)");
        }
        
        // verify the required parameter 'documentIds' is set
        if (documentIds == null) {
            throw new ApiException("Missing the required parameter 'documentIds' when calling transformDocumentAsync(Async)");
        }
        
        // verify the required parameter 'outputType' is set
        if (outputType == null) {
            throw new ApiException("Missing the required parameter 'outputType' when calling transformDocumentAsync(Async)");
        }
        

        okhttp3.Call localVarCall = transformDocumentAsyncCall(token, documentIds, outputType, inputTag, outputTag, executeAfterId, callbackUrl, transformParams, transformBody, _callback);
        return localVarCall;

    }

    /**
     * Asynchronously converts a document within Leia API
     * Asynchronously transforms a document from its current type to the output_type. May generate multiple new documents (for example converting a PDF to image will generate one new image document for each page of the PDF). Returns a Job, that will have to be polled to get the result.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Job transformDocumentAsync(String token, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String callbackUrl, Object transformParams, TransformBody transformBody) throws ApiException {
        ApiResponse<Job> localVarResp = transformDocumentAsyncWithHttpInfo(token, documentIds, outputType, inputTag, outputTag, executeAfterId, callbackUrl, transformParams, transformBody);
        return localVarResp.getData();
    }

    /**
     * Asynchronously converts a document within Leia API
     * Asynchronously transforms a document from its current type to the output_type. May generate multiple new documents (for example converting a PDF to image will generate one new image document for each page of the PDF). Returns a Job, that will have to be polled to get the result.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> transformDocumentAsyncWithHttpInfo(String token, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String callbackUrl, Object transformParams, TransformBody transformBody) throws ApiException {
        okhttp3.Call localVarCall = transformDocumentAsyncValidateBeforeCall(token, documentIds, outputType, inputTag, outputTag, executeAfterId, callbackUrl, transformParams, transformBody, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronously converts a document within Leia API (asynchronously)
     * Asynchronously transforms a document from its current type to the output_type. May generate multiple new documents (for example converting a PDF to image will generate one new image document for each page of the PDF). Returns a Job, that will have to be polled to get the result.
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformDocumentAsyncAsync(String token, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String callbackUrl, Object transformParams, TransformBody transformBody, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformDocumentAsyncValidateBeforeCall(token, documentIds, outputType, inputTag, outputTag, executeAfterId, callbackUrl, transformParams, transformBody, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagDocumentCall(String token, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{document_id}/tag/{tag}"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagDocumentValidateBeforeCall(String token, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling untagDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling untagDocument(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling untagDocument(Async)");
        }
        

        okhttp3.Call localVarCall = untagDocumentCall(token, documentId, tag, _callback);
        return localVarCall;

    }

    /**
     * Untags an document
     * Untags a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public void untagDocument(String token, String documentId, String tag) throws ApiException {
        untagDocumentWithHttpInfo(token, documentId, tag);
    }

    /**
     * Untags an document
     * Untags a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagDocumentWithHttpInfo(String token, String documentId, String tag) throws ApiException {
        okhttp3.Call localVarCall = untagDocumentValidateBeforeCall(token, documentId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Untags an document (asynchronously)
     * Untags a document
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagDocumentAsync(String token, String documentId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagDocumentValidateBeforeCall(token, documentId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
