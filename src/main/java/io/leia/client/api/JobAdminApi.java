/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@leia.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.ConditionalBody;
import io.leia.client.model.Job;
import io.leia.client.model.JobTypes;
import java.time.OffsetDateTime;
import io.leia.client.model.Statuses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobAdminApi {
    private ApiClient localVarApiClient;

    public JobAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for adminCancelJob
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCancelJobCall(String token, String submitterId, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{submitter_id}/job/{job_id}"
            .replaceAll("\\{" + "submitter_id" + "\\}", localVarApiClient.escapeString(submitterId.toString()))
            .replaceAll("\\{" + "job_id" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminCancelJobValidateBeforeCall(String token, String submitterId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminCancelJob(Async)");
        }
        
        // verify the required parameter 'submitterId' is set
        if (submitterId == null) {
            throw new ApiException("Missing the required parameter 'submitterId' when calling adminCancelJob(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling adminCancelJob(Async)");
        }
        

        okhttp3.Call localVarCall = adminCancelJobCall(token, submitterId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Cancels a job in Leia API (admin only)
     * Cancels a job in Leia API (This will not really delete it, just mark it as cancelled, so dependent jobs will fail). This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public void adminCancelJob(String token, String submitterId, String jobId) throws ApiException {
        adminCancelJobWithHttpInfo(token, submitterId, jobId);
    }

    /**
     * Cancels a job in Leia API (admin only)
     * Cancels a job in Leia API (This will not really delete it, just mark it as cancelled, so dependent jobs will fail). This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminCancelJobWithHttpInfo(String token, String submitterId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = adminCancelJobValidateBeforeCall(token, submitterId, jobId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancels a job in Leia API (admin only) (asynchronously)
     * Cancels a job in Leia API (This will not really delete it, just mark it as cancelled, so dependent jobs will fail). This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The job was successfully canceled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found (or already canceled) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCancelJobAsync(String token, String submitterId, String jobId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminCancelJobValidateBeforeCall(token, submitterId, jobId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminCreateConditionalJob
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the models belongs (required)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (required)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param conditionalBody Contains the rules to choose the model to apply. All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateConditionalJobCall(String token, String applicationId, String executeAfterId, String callbackUrl, Boolean blockProcessing, ConditionalBody conditionalBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conditionalBody;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/job/conditional/{execute_after_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "execute_after_id" + "\\}", localVarApiClient.escapeString(executeAfterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback_url", callbackUrl));
        }

        if (blockProcessing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("block_processing", blockProcessing));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminCreateConditionalJobValidateBeforeCall(String token, String applicationId, String executeAfterId, String callbackUrl, Boolean blockProcessing, ConditionalBody conditionalBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminCreateConditionalJob(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminCreateConditionalJob(Async)");
        }
        
        // verify the required parameter 'executeAfterId' is set
        if (executeAfterId == null) {
            throw new ApiException("Missing the required parameter 'executeAfterId' when calling adminCreateConditionalJob(Async)");
        }
        

        okhttp3.Call localVarCall = adminCreateConditionalJobCall(token, applicationId, executeAfterId, callbackUrl, blockProcessing, conditionalBody, _callback);
        return localVarCall;

    }

    /**
     * Asynchronously and conditionaly applies model(s) on documents (admin only)
     * This method is only accessible to admins.&lt;br /&gt; Asynchronously runs one or more list of jobs on accessible documents and returns a Job.&lt;br /&gt; The list of jobs to run and the documents on which they should be run will be chosen depending on the rules parameter that is set in the body of the request and the result of the execute_after_id job.&lt;br /&gt; Rules should be a map[string,object] where the key is a user chosen id and the value is a list of objects containing the same parameters as normal calls to /admin/{application_id}/model/{model_id}/apply{document_ids} or /admin/{application_id}/document/{document_ids}/transform/{output_type} and a conditions field.&lt;br /&gt; If all the field/values in the conditions of a rule are contained as is in the result of the execute_after_id job, then the list of jobs will be executed in order with the given parameters, each job depending on the previous one in the list, else it won&#39;t be executed at all&lt;br /&gt; Syntax for conditions is as follows:   * \&quot;field_name\&quot; : value In which case the field field_name must be equal to the value for the job to be executed. value can be any valid json type (int, float, string...)   * \&quot;field_name\&quot;: {\&quot;operator\&quot; : value} Where operator is a [Mongo like comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/). In this case the comparison between field field_name&#39;s value must be true for the job to be executed. value can be any valid json type (int, float, string...)   * \&quot;field_name\&quot;: [{\&quot;operator_1\&quot; : value_1}...{\&quot;operator_n\&quot; : value_n}] Where operator_i is a [Mongo like comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/). In this case the comparison between field field_name&#39;s value must be true for all items in the list for the job to be executed. value_i can be any valid json type (int, float, string...). {\&quot;$eq\&quot; : value_i} can be abbreviated as value_i in the list.  You can keep the document_ids field of any job empty. If it is, the job will use the results of previous job&#39;s as an input if no tag is set, or the document_ids of the execute_after_id job + tag if tag is set.&lt;br /&gt; If the conditions are not mutually exclusive, 2 or more models may be executed.&lt;br /&gt; The result will be sent back as a map of results where the key is the rule id, and containing one entry for list of jobs that was executed. This entry will contain all the results of the executed jobs, in execution order&lt;br /&gt; This is mostly but not necessarily meant to be used after a classifier model, so that an execution path can be chosen automatically depending on the result of the classification. 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the models belongs (required)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (required)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param conditionalBody Contains the rules to choose the model to apply. All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public Job adminCreateConditionalJob(String token, String applicationId, String executeAfterId, String callbackUrl, Boolean blockProcessing, ConditionalBody conditionalBody) throws ApiException {
        ApiResponse<Job> localVarResp = adminCreateConditionalJobWithHttpInfo(token, applicationId, executeAfterId, callbackUrl, blockProcessing, conditionalBody);
        return localVarResp.getData();
    }

    /**
     * Asynchronously and conditionaly applies model(s) on documents (admin only)
     * This method is only accessible to admins.&lt;br /&gt; Asynchronously runs one or more list of jobs on accessible documents and returns a Job.&lt;br /&gt; The list of jobs to run and the documents on which they should be run will be chosen depending on the rules parameter that is set in the body of the request and the result of the execute_after_id job.&lt;br /&gt; Rules should be a map[string,object] where the key is a user chosen id and the value is a list of objects containing the same parameters as normal calls to /admin/{application_id}/model/{model_id}/apply{document_ids} or /admin/{application_id}/document/{document_ids}/transform/{output_type} and a conditions field.&lt;br /&gt; If all the field/values in the conditions of a rule are contained as is in the result of the execute_after_id job, then the list of jobs will be executed in order with the given parameters, each job depending on the previous one in the list, else it won&#39;t be executed at all&lt;br /&gt; Syntax for conditions is as follows:   * \&quot;field_name\&quot; : value In which case the field field_name must be equal to the value for the job to be executed. value can be any valid json type (int, float, string...)   * \&quot;field_name\&quot;: {\&quot;operator\&quot; : value} Where operator is a [Mongo like comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/). In this case the comparison between field field_name&#39;s value must be true for the job to be executed. value can be any valid json type (int, float, string...)   * \&quot;field_name\&quot;: [{\&quot;operator_1\&quot; : value_1}...{\&quot;operator_n\&quot; : value_n}] Where operator_i is a [Mongo like comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/). In this case the comparison between field field_name&#39;s value must be true for all items in the list for the job to be executed. value_i can be any valid json type (int, float, string...). {\&quot;$eq\&quot; : value_i} can be abbreviated as value_i in the list.  You can keep the document_ids field of any job empty. If it is, the job will use the results of previous job&#39;s as an input if no tag is set, or the document_ids of the execute_after_id job + tag if tag is set.&lt;br /&gt; If the conditions are not mutually exclusive, 2 or more models may be executed.&lt;br /&gt; The result will be sent back as a map of results where the key is the rule id, and containing one entry for list of jobs that was executed. This entry will contain all the results of the executed jobs, in execution order&lt;br /&gt; This is mostly but not necessarily meant to be used after a classifier model, so that an execution path can be chosen automatically depending on the result of the classification. 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the models belongs (required)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (required)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param conditionalBody Contains the rules to choose the model to apply. All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> adminCreateConditionalJobWithHttpInfo(String token, String applicationId, String executeAfterId, String callbackUrl, Boolean blockProcessing, ConditionalBody conditionalBody) throws ApiException {
        okhttp3.Call localVarCall = adminCreateConditionalJobValidateBeforeCall(token, applicationId, executeAfterId, callbackUrl, blockProcessing, conditionalBody, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronously and conditionaly applies model(s) on documents (admin only) (asynchronously)
     * This method is only accessible to admins.&lt;br /&gt; Asynchronously runs one or more list of jobs on accessible documents and returns a Job.&lt;br /&gt; The list of jobs to run and the documents on which they should be run will be chosen depending on the rules parameter that is set in the body of the request and the result of the execute_after_id job.&lt;br /&gt; Rules should be a map[string,object] where the key is a user chosen id and the value is a list of objects containing the same parameters as normal calls to /admin/{application_id}/model/{model_id}/apply{document_ids} or /admin/{application_id}/document/{document_ids}/transform/{output_type} and a conditions field.&lt;br /&gt; If all the field/values in the conditions of a rule are contained as is in the result of the execute_after_id job, then the list of jobs will be executed in order with the given parameters, each job depending on the previous one in the list, else it won&#39;t be executed at all&lt;br /&gt; Syntax for conditions is as follows:   * \&quot;field_name\&quot; : value In which case the field field_name must be equal to the value for the job to be executed. value can be any valid json type (int, float, string...)   * \&quot;field_name\&quot;: {\&quot;operator\&quot; : value} Where operator is a [Mongo like comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/). In this case the comparison between field field_name&#39;s value must be true for the job to be executed. value can be any valid json type (int, float, string...)   * \&quot;field_name\&quot;: [{\&quot;operator_1\&quot; : value_1}...{\&quot;operator_n\&quot; : value_n}] Where operator_i is a [Mongo like comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/). In this case the comparison between field field_name&#39;s value must be true for all items in the list for the job to be executed. value_i can be any valid json type (int, float, string...). {\&quot;$eq\&quot; : value_i} can be abbreviated as value_i in the list.  You can keep the document_ids field of any job empty. If it is, the job will use the results of previous job&#39;s as an input if no tag is set, or the document_ids of the execute_after_id job + tag if tag is set.&lt;br /&gt; If the conditions are not mutually exclusive, 2 or more models may be executed.&lt;br /&gt; The result will be sent back as a map of results where the key is the rule id, and containing one entry for list of jobs that was executed. This entry will contain all the results of the executed jobs, in execution order&lt;br /&gt; This is mostly but not necessarily meant to be used after a classifier model, so that an execution path can be chosen automatically depending on the result of the classification. 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the models belongs (required)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (required)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param blockProcessing If true, blocks processing on the job until /job/{id}/start is called. Default is false (optional)
     * @param conditionalBody Contains the rules to choose the model to apply. All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON depending on the data that the model is able to output. Might be converted to Classification if format_type was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The documents could not be processed by this model, or using a tag with multiple document_ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a classification model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Model or document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateConditionalJobAsync(String token, String applicationId, String executeAfterId, String callbackUrl, Boolean blockProcessing, ConditionalBody conditionalBody, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminCreateConditionalJobValidateBeforeCall(token, applicationId, executeAfterId, callbackUrl, blockProcessing, conditionalBody, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetJob
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetJobCall(String token, String submitterId, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{submitter_id}/job/{job_id}"
            .replaceAll("\\{" + "submitter_id" + "\\}", localVarApiClient.escapeString(submitterId.toString()))
            .replaceAll("\\{" + "job_id" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetJobValidateBeforeCall(String token, String submitterId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetJob(Async)");
        }
        
        // verify the required parameter 'submitterId' is set
        if (submitterId == null) {
            throw new ApiException("Missing the required parameter 'submitterId' when calling adminGetJob(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling adminGetJob(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetJobCall(token, submitterId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a job from Leia API (admin only)
     * Retrieves a job from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to retrieve (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public Job adminGetJob(String token, String submitterId, String jobId) throws ApiException {
        ApiResponse<Job> localVarResp = adminGetJobWithHttpInfo(token, submitterId, jobId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a job from Leia API (admin only)
     * Retrieves a job from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to retrieve (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> adminGetJobWithHttpInfo(String token, String submitterId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = adminGetJobValidateBeforeCall(token, submitterId, jobId, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a job from Leia API (admin only) (asynchronously)
     * Retrieves a job from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetJobAsync(String token, String submitterId, String jobId, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetJobValidateBeforeCall(token, submitterId, jobId, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetJobStatuses
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The id of the submitter of the job (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetJobStatusesCall(String token, String submitterId, List<String> jobIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{submitter_id}/job/{job_ids}/status"
            .replaceAll("\\{" + "submitter_id" + "\\}", localVarApiClient.escapeString(submitterId.toString()))
            .replaceAll("\\{" + "job_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", jobIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetJobStatusesValidateBeforeCall(String token, String submitterId, List<String> jobIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetJobStatuses(Async)");
        }
        
        // verify the required parameter 'submitterId' is set
        if (submitterId == null) {
            throw new ApiException("Missing the required parameter 'submitterId' when calling adminGetJobStatuses(Async)");
        }
        
        // verify the required parameter 'jobIds' is set
        if (jobIds == null) {
            throw new ApiException("Missing the required parameter 'jobIds' when calling adminGetJobStatuses(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetJobStatusesCall(token, submitterId, jobIds, _callback);
        return localVarCall;

    }

    /**
     * Retrieves job statuses from Leia API (admin only)
     * Retrieves a list of job statuses from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The id of the submitter of the job (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @return Map&lt;String, Statuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Statuses> adminGetJobStatuses(String token, String submitterId, List<String> jobIds) throws ApiException {
        ApiResponse<Map<String, Statuses>> localVarResp = adminGetJobStatusesWithHttpInfo(token, submitterId, jobIds);
        return localVarResp.getData();
    }

    /**
     * Retrieves job statuses from Leia API (admin only)
     * Retrieves a list of job statuses from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The id of the submitter of the job (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @return ApiResponse&lt;Map&lt;String, Statuses&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Statuses>> adminGetJobStatusesWithHttpInfo(String token, String submitterId, List<String> jobIds) throws ApiException {
        okhttp3.Call localVarCall = adminGetJobStatusesValidateBeforeCall(token, submitterId, jobIds, null);
        Type localVarReturnType = new TypeToken<Map<String, Statuses>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves job statuses from Leia API (admin only) (asynchronously)
     * Retrieves a list of job statuses from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The id of the submitter of the job (required)
     * @param jobIds The ids of the jobs to retrieve, comma separated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved job statuses, in a map indexed by job id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetJobStatusesAsync(String token, String submitterId, List<String> jobIds, final ApiCallback<Map<String, Statuses>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetJobStatusesValidateBeforeCall(token, submitterId, jobIds, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Statuses>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetJobs
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param submitterId The id of the submitter of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetJobsCall(String token, String jobId, String submitterId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/job";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        if (submitterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submitter_id", submitterId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (jobType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_type", jobType));
        }

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_id", modelId));
        }

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (executeAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execute_after_id", executeAfterId));
        }

        if (parentJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_job_id", parentJobId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetJobsValidateBeforeCall(String token, String jobId, String submitterId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetJobs(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetJobsCall(token, jobId, submitterId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Retrieves jobs (admin only) (paginated)
     * Get jobs from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param submitterId The id of the submitter of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @return List&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public List<Job> adminGetJobs(String token, String jobId, String submitterId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Job>> localVarResp = adminGetJobsWithHttpInfo(token, jobId, submitterId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieves jobs (admin only) (paginated)
     * Get jobs from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param submitterId The id of the submitter of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @return ApiResponse&lt;List&lt;Job&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Job>> adminGetJobsWithHttpInfo(String token, String jobId, String submitterId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = adminGetJobsValidateBeforeCall(token, jobId, submitterId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves jobs (admin only) (paginated) (asynchronously)
     * Get jobs from the system. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobId The id of the job (optional)
     * @param submitterId The id of the submitter of the job (optional)
     * @param applicationId The id of the owner of the documents processed by this job (optional)
     * @param jobType The type of the job (predict, pdf-images, image-text or transform) (optional)
     * @param modelId The model used by the job (only for predict jobs) (optional)
     * @param documentId The document that this the job is processing (optional)
     * @param executeAfterId The job that is a prerequisite for this job to run (optional)
     * @param parentJobId The job that is the parent of this job (optional)
     * @param status The status of the job (optional)
     * @param createdAfter If specified, keeps only jobs created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only jobs created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param sort If specified, sorts the jobs by a list of existing parameters separated by commas. Can be &#39;submitter_id&#39;, &#39;application_id&#39;, &#39;creation_time&#39;, &#39;starting_time&#39;, &#39;finished_time&#39;, &#39;job_type&#39;, &#39;model_id&#39;, &#39;document_ids&#39;, &#39;status&#39;, &#39;parent_job_id&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first job to send (pagination) (optional)
     * @param limit Maximum number of jobs to send (pagination) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved jobs. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: job max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No jobs found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetJobsAsync(String token, String jobId, String submitterId, String applicationId, JobTypes jobType, String modelId, String documentId, String executeAfterId, String parentJobId, Statuses status, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String sort, Integer offset, Integer limit, final ApiCallback<List<Job>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetJobsValidateBeforeCall(token, jobId, submitterId, applicationId, jobType, modelId, documentId, executeAfterId, parentJobId, status, createdAfter, createdBefore, sort, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminStartJob
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to start (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The started job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminStartJobCall(String token, String submitterId, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{submitter_id}/job/{job_id}/start"
            .replaceAll("\\{" + "submitter_id" + "\\}", localVarApiClient.escapeString(submitterId.toString()))
            .replaceAll("\\{" + "job_id" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminStartJobValidateBeforeCall(String token, String submitterId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminStartJob(Async)");
        }
        
        // verify the required parameter 'submitterId' is set
        if (submitterId == null) {
            throw new ApiException("Missing the required parameter 'submitterId' when calling adminStartJob(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling adminStartJob(Async)");
        }
        

        okhttp3.Call localVarCall = adminStartJobCall(token, submitterId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Starts a job in BLOCKED status within Leia API
     * Triggers a job in BLOCKED status 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to start (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The started job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public Job adminStartJob(String token, String submitterId, String jobId) throws ApiException {
        ApiResponse<Job> localVarResp = adminStartJobWithHttpInfo(token, submitterId, jobId);
        return localVarResp.getData();
    }

    /**
     * Starts a job in BLOCKED status within Leia API
     * Triggers a job in BLOCKED status 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to start (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The started job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> adminStartJobWithHttpInfo(String token, String submitterId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = adminStartJobValidateBeforeCall(token, submitterId, jobId, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts a job in BLOCKED status within Leia API (asynchronously)
     * Triggers a job in BLOCKED status 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param submitterId The application which submitted the job (required)
     * @param jobId The id of the job to start (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The started job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the job </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminStartJobAsync(String token, String submitterId, String jobId, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminStartJobValidateBeforeCall(token, submitterId, jobId, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
