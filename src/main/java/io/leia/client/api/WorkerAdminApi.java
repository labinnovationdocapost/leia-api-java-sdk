/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@leia.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerAdminApi {
    private ApiClient localVarApiClient;

    public WorkerAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for killWorker
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to kill a worker (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A worker kill switch has been sent to the job queue </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call killWorkerCall(String token, String jobType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worker/{job_type}"
            .replaceAll("\\{" + "job_type" + "\\}", localVarApiClient.escapeString(jobType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call killWorkerValidateBeforeCall(String token, String jobType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling killWorker(Async)");
        }
        
        // verify the required parameter 'jobType' is set
        if (jobType == null) {
            throw new ApiException("Missing the required parameter 'jobType' when calling killWorker(Async)");
        }
        

        okhttp3.Call localVarCall = killWorkerCall(token, jobType, _callback);
        return localVarCall;

    }

    /**
     * Kills a worker (admin only)
     * Kills a worker for a given job_type. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to kill a worker (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A worker kill switch has been sent to the job queue </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public void killWorker(String token, String jobType) throws ApiException {
        killWorkerWithHttpInfo(token, jobType);
    }

    /**
     * Kills a worker (admin only)
     * Kills a worker for a given job_type. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to kill a worker (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A worker kill switch has been sent to the job queue </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> killWorkerWithHttpInfo(String token, String jobType) throws ApiException {
        okhttp3.Call localVarCall = killWorkerValidateBeforeCall(token, jobType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Kills a worker (admin only) (asynchronously)
     * Kills a worker for a given job_type. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param jobType The job_type for which to kill a worker (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A worker kill switch has been sent to the job queue </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Not running in worker mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in or not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No worker running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call killWorkerAsync(String token, String jobType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = killWorkerValidateBeforeCall(token, jobType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
