/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sebastien.favre@docapost.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.api;

import io.leia.client.ApiCallback;
import io.leia.client.ApiClient;
import io.leia.client.ApiException;
import io.leia.client.ApiResponse;
import io.leia.client.Configuration;
import io.leia.client.Pair;
import io.leia.client.ProgressRequestBody;
import io.leia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.leia.client.model.Document;
import java.io.File;
import io.leia.client.model.Job;
import java.time.OffsetDateTime;
import io.leia.client.model.TransformBody;
import io.leia.client.model.TransformTypes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentAdminApi {
    private ApiClient localVarApiClient;

    public DocumentAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for adminCreateDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateDocumentCall(String token, String applicationId, String filename, File body, Integer ttl, List<String> tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminCreateDocumentValidateBeforeCall(String token, String applicationId, String filename, File body, Integer ttl, List<String> tags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminCreateDocument(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminCreateDocument(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling adminCreateDocument(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminCreateDocument(Async)");
        }
        

        okhttp3.Call localVarCall = adminCreateDocumentCall(token, applicationId, filename, body, ttl, tags, _callback);
        return localVarCall;

    }

    /**
     * Uploads a document to the Leia API (admin only)
     * Uploads a document to Leia API for future use. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public Document adminCreateDocument(String token, String applicationId, String filename, File body, Integer ttl, List<String> tags) throws ApiException {
        ApiResponse<Document> localVarResp = adminCreateDocumentWithHttpInfo(token, applicationId, filename, body, ttl, tags);
        return localVarResp.getData();
    }

    /**
     * Uploads a document to the Leia API (admin only)
     * Uploads a document to Leia API for future use. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> adminCreateDocumentWithHttpInfo(String token, String applicationId, String filename, File body, Integer ttl, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = adminCreateDocumentValidateBeforeCall(token, applicationId, filename, body, ttl, tags, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Uploads a document to the Leia API (admin only) (asynchronously)
     * Uploads a document to Leia API for future use. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application that will own the model (required)
     * @param filename The name of the file (if present, extension will be separated from filename in metadata of the document) (required)
     * @param body  (required)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param tags The tags of the document (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A description of the uploaded document </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateDocumentAsync(String token, String applicationId, String filename, File body, Integer ttl, List<String> tags, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminCreateDocumentValidateBeforeCall(token, applicationId, filename, body, ttl, tags, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminDeleteDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to delete belongs (required)
     * @param documentId The id of the document to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteDocumentCall(String token, String applicationId, String documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document/{document_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDeleteDocumentValidateBeforeCall(String token, String applicationId, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminDeleteDocument(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminDeleteDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling adminDeleteDocument(Async)");
        }
        

        okhttp3.Call localVarCall = adminDeleteDocumentCall(token, applicationId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a document from Leia API (admin only)
     * Deletes a document from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to delete belongs (required)
     * @param documentId The id of the document to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public void adminDeleteDocument(String token, String applicationId, String documentId) throws ApiException {
        adminDeleteDocumentWithHttpInfo(token, applicationId, documentId);
    }

    /**
     * Deletes a document from Leia API (admin only)
     * Deletes a document from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to delete belongs (required)
     * @param documentId The id of the document to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminDeleteDocumentWithHttpInfo(String token, String applicationId, String documentId) throws ApiException {
        okhttp3.Call localVarCall = adminDeleteDocumentValidateBeforeCall(token, applicationId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a document from Leia API (admin only) (asynchronously)
     * Deletes a document from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to delete belongs (required)
     * @param documentId The id of the document to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The document was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteDocumentAsync(String token, String applicationId, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDeleteDocumentValidateBeforeCall(token, applicationId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminEditDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to update belongs (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEditDocumentCall(String token, String applicationId, String documentId, String filename, Integer rotationAngle, Integer ttl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document/{document_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (rotationAngle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rotation_angle", rotationAngle));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminEditDocumentValidateBeforeCall(String token, String applicationId, String documentId, String filename, Integer rotationAngle, Integer ttl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminEditDocument(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminEditDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling adminEditDocument(Async)");
        }
        

        okhttp3.Call localVarCall = adminEditDocumentCall(token, applicationId, documentId, filename, rotationAngle, ttl, _callback);
        return localVarCall;

    }

    /**
     * Updates a document in Leia API (admin only)
     * Updates metadata for a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to update belongs (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Document adminEditDocument(String token, String applicationId, String documentId, String filename, Integer rotationAngle, Integer ttl) throws ApiException {
        ApiResponse<Document> localVarResp = adminEditDocumentWithHttpInfo(token, applicationId, documentId, filename, rotationAngle, ttl);
        return localVarResp.getData();
    }

    /**
     * Updates a document in Leia API (admin only)
     * Updates metadata for a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to update belongs (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> adminEditDocumentWithHttpInfo(String token, String applicationId, String documentId, String filename, Integer rotationAngle, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = adminEditDocumentValidateBeforeCall(token, applicationId, documentId, filename, rotationAngle, ttl, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a document in Leia API (admin only) (asynchronously)
     * Updates metadata for a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to update belongs (required)
     * @param documentId The id of the document to update (required)
     * @param filename The new file name of the document (optional)
     * @param rotationAngle The new rotation angle of the document (optional)
     * @param ttl The TTL (in seconds, not less than 60) for the document (if present, the document and any sub documents, annotations, or jobs linked to it will be deleted after the TTL is expired) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The documents&#39; metadata, updated with new values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEditDocumentAsync(String token, String applicationId, String documentId, String filename, Integer rotationAngle, Integer ttl, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminEditDocumentValidateBeforeCall(token, applicationId, documentId, filename, rotationAngle, ttl, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentCall(String token, String applicationId, String documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document/{document_id}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetDocumentValidateBeforeCall(String token, String applicationId, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetDocument(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminGetDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling adminGetDocument(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetDocumentCall(token, applicationId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a document from Leia API (admin only)
     * Retrieves a document from Leia API as metadata. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Document adminGetDocument(String token, String applicationId, String documentId) throws ApiException {
        ApiResponse<Document> localVarResp = adminGetDocumentWithHttpInfo(token, applicationId, documentId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a document from Leia API (admin only)
     * Retrieves a document from Leia API as metadata. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> adminGetDocumentWithHttpInfo(String token, String applicationId, String documentId) throws ApiException {
        okhttp3.Call localVarCall = adminGetDocumentValidateBeforeCall(token, applicationId, documentId, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a document from Leia API (admin only) (asynchronously)
     * Retrieves a document from Leia API as metadata. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentAsync(String token, String applicationId, String documentId, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetDocumentValidateBeforeCall(token, applicationId, documentId, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetDocumentContents
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentContentsCall(String token, String applicationId, String documentId, Integer maxSize, Integer jpegCompression, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document/{document_id}/file_contents"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_size", maxSize));
        }

        if (jpegCompression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jpeg_compression", jpegCompression));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetDocumentContentsValidateBeforeCall(String token, String applicationId, String documentId, Integer maxSize, Integer jpegCompression, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetDocumentContents(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminGetDocumentContents(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling adminGetDocumentContents(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetDocumentContentsCall(token, applicationId, documentId, maxSize, jpegCompression, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a document from Leia API (admin only)
     * Retrieves the binary contents of a document from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public File adminGetDocumentContents(String token, String applicationId, String documentId, Integer maxSize, Integer jpegCompression) throws ApiException {
        ApiResponse<File> localVarResp = adminGetDocumentContentsWithHttpInfo(token, applicationId, documentId, maxSize, jpegCompression);
        return localVarResp.getData();
    }

    /**
     * Retrieves a document from Leia API (admin only)
     * Retrieves the binary contents of a document from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> adminGetDocumentContentsWithHttpInfo(String token, String applicationId, String documentId, Integer maxSize, Integer jpegCompression) throws ApiException {
        okhttp3.Call localVarCall = adminGetDocumentContentsValidateBeforeCall(token, applicationId, documentId, maxSize, jpegCompression, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a document from Leia API (admin only) (asynchronously)
     * Retrieves the binary contents of a document from Leia API. This method is only accessible to admins 
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to retrieve belongs (required)
     * @param documentId The id of the document to retrieve (required)
     * @param maxSize Restrict the size of the image to get (only applicable for documents of type image). The largest dimension of the image will be capped to this dimension (optional)
     * @param jpegCompression JPEG compression rate, in percent (only applicable for documents of type image) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved document&#39;s binary contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentContentsAsync(String token, String applicationId, String documentId, Integer maxSize, Integer jpegCompression, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetDocumentContentsValidateBeforeCall(token, applicationId, documentId, maxSize, jpegCompression, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetDocuments
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentsCall(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (extension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extension", extension));
        }

        if (mimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mime_type", mimeType));
        }

        if (originalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("original_id", originalId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (tagResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_result", tagResult));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetDocumentsValidateBeforeCall(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetDocumentsCall(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Retrieves documents from Leia API (admin only) (paginated)
     * Retrieves documents which matches the query from Leia API as JSON metadata. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @return List&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Document> adminGetDocuments(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Document>> localVarResp = adminGetDocumentsWithHttpInfo(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieves documents from Leia API (admin only) (paginated)
     * Retrieves documents which matches the query from Leia API as JSON metadata. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @return ApiResponse&lt;List&lt;Document&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Document>> adminGetDocumentsWithHttpInfo(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = adminGetDocumentsValidateBeforeCall(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves documents from Leia API (admin only) (paginated) (asynchronously)
     * Retrieves documents which matches the query from Leia API as JSON metadata. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param tagResult Atomically adds a tag to all retrieved values if specified. The added tag will not be returned in the result (optional)
     * @param sort If specified, sorts the documents by a list of existing parameters separated by commas. Can be &#39;application_id&#39;, &#39;filename&#39;, &#39;extension&#39;, &#39;mime_type&#39;, &#39;original_id&#39;, &#39;page&#39;, &#39;creation_time&#39;. Sorts in ascending order by default. If a parameter is preceded by &#39;-&#39;, it is sorted in descending order. (optional)
     * @param offset Number of the first document to send (pagination) (optional)
     * @param limit Maximum number of documents to send (pagination) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; metadata. Also contains pagination information in the headers:&lt;br /&gt; Content-Range: first-last/total&lt;br /&gt; Accept-Range: document max_limit  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentsAsync(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String tagResult, String sort, Integer offset, Integer limit, final ApiCallback<List<Document>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetDocumentsValidateBeforeCall(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, tagResult, sort, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetDocumentsTags
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId Restrict to tags belonging to this application (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentsTagsCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/document/tag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetDocumentsTagsValidateBeforeCall(String token, String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetDocumentsTags(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetDocumentsTagsCall(token, applicationId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves documents&#39; tags from Leia API (admin only)
     * Retrieves tags from documents. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId Restrict to tags belonging to this application (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public List<String> adminGetDocumentsTags(String token, String applicationId) throws ApiException {
        ApiResponse<List<String>> localVarResp = adminGetDocumentsTagsWithHttpInfo(token, applicationId);
        return localVarResp.getData();
    }

    /**
     * Retrieves documents&#39; tags from Leia API (admin only)
     * Retrieves tags from documents. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId Restrict to tags belonging to this application (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> adminGetDocumentsTagsWithHttpInfo(String token, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = adminGetDocumentsTagsValidateBeforeCall(token, applicationId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves documents&#39; tags from Leia API (admin only) (asynchronously)
     * Retrieves tags from documents. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId Restrict to tags belonging to this application (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved documents&#39; tags  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tags not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentsTagsAsync(String token, String applicationId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetDocumentsTagsValidateBeforeCall(token, applicationId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetDocumentsZip
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file containing the documents. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentsZipCall(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/document/zip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (extension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extension", extension));
        }

        if (mimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mime_type", mimeType));
        }

        if (originalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("original_id", originalId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetDocumentsZipValidateBeforeCall(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminGetDocumentsZip(Async)");
        }
        

        okhttp3.Call localVarCall = adminGetDocumentsZipCall(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, _callback);
        return localVarCall;

    }

    /**
     * Retrieves documents from Leia API (admin only) (paginated)
     * Retrieves documents which matches the query from Leia API in a zip file. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file containing the documents. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public File adminGetDocumentsZip(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore) throws ApiException {
        ApiResponse<File> localVarResp = adminGetDocumentsZipWithHttpInfo(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Retrieves documents from Leia API (admin only) (paginated)
     * Retrieves documents which matches the query from Leia API in a zip file. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file containing the documents. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> adminGetDocumentsZipWithHttpInfo(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore) throws ApiException {
        okhttp3.Call localVarCall = adminGetDocumentsZipValidateBeforeCall(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves documents from Leia API (admin only) (paginated) (asynchronously)
     * Retrieves documents which matches the query from Leia API in a zip file. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param documentId The id of the document (optional)
     * @param applicationId The application that owns the documents (optional)
     * @param filename The file name of the documents to retrieve (optional)
     * @param extension The extension of the documents to retrieve (optional)
     * @param mimeType Filters by MIME type (optional)
     * @param originalId Filters by original id (optional)
     * @param tags If specified, filters the documents by tag (optional)
     * @param createdAfter If specified, keeps only documents created after given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param createdBefore If specified, keeps only documents created before given UTC timestamp (ISO 8601 format : yyyy-MM-ddThh:mm:ss) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file containing the documents. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> At least one filter must be applied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDocumentsZipAsync(String token, String documentId, String applicationId, String filename, String extension, String mimeType, String originalId, List<String> tags, OffsetDateTime createdAfter, OffsetDateTime createdBefore, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetDocumentsZipValidateBeforeCall(token, documentId, applicationId, filename, extension, mimeType, originalId, tags, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminTagDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to tag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTagDocumentCall(String token, String applicationId, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document/{document_id}/tag/{tag}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminTagDocumentValidateBeforeCall(String token, String applicationId, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminTagDocument(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminTagDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling adminTagDocument(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling adminTagDocument(Async)");
        }
        

        okhttp3.Call localVarCall = adminTagDocumentCall(token, applicationId, documentId, tag, _callback);
        return localVarCall;

    }

    /**
     * Tags a document (admin only)
     * Tags a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to tag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Document adminTagDocument(String token, String applicationId, String documentId, String tag) throws ApiException {
        ApiResponse<Document> localVarResp = adminTagDocumentWithHttpInfo(token, applicationId, documentId, tag);
        return localVarResp.getData();
    }

    /**
     * Tags a document (admin only)
     * Tags a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to tag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> adminTagDocumentWithHttpInfo(String token, String applicationId, String documentId, String tag) throws ApiException {
        okhttp3.Call localVarCall = adminTagDocumentValidateBeforeCall(token, applicationId, documentId, tag, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tags a document (admin only) (asynchronously)
     * Tags a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to tag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to add to the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document with the new tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTagDocumentAsync(String token, String applicationId, String documentId, String tag, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminTagDocumentValidateBeforeCall(token, applicationId, documentId, tag, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminTransformDocumentAsync
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application id whose documents to transform belong to (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :&lt;ul&gt; &lt;li&gt;Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))&lt;/li&gt; &lt;li&gt;Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)&lt;/li&gt; &lt;li&gt;Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0) Examples&lt;ul&gt;     &lt;li&gt;2: will keep all pages starting from page 3&lt;/li&gt;     &lt;li&gt;:5 will keep only pages 1 to 5&lt;/li&gt;     &lt;li&gt;2:5 will keep only pages 3, 4 and 5&lt;/li&gt;     &lt;li&gt;-4: will keep only pages 7 to 10 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;:-2 will keep only pages 1 to 8 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;-4:-2 will keep only pages 7 and 8 if there are 10 total pages)&lt;/li&gt;   &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Stride (::w) : Keep 1 page every w pages starting at the first one (example ::2 will keep only odd pages)&lt;/li&gt; &lt;li&gt;Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages)&lt;/li&gt; &lt;/ul&gt; You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTransformDocumentAsyncCall(String token, String applicationId, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String pageRange, String callbackUrl, Object transformParams, TransformBody transformBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transformBody;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document/{document_ids}/transform/{output_type}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "document_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", documentIds)))
            .replaceAll("\\{" + "output_type" + "\\}", localVarApiClient.escapeString(outputType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input_tag", inputTag));
        }

        if (outputTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output_tag", outputTag));
        }

        if (executeAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execute_after_id", executeAfterId));
        }

        if (pageRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_range", pageRange));
        }

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback_url", callbackUrl));
        }

        if (transformParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transform_params", transformParams));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminTransformDocumentAsyncValidateBeforeCall(String token, String applicationId, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String pageRange, String callbackUrl, Object transformParams, TransformBody transformBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminTransformDocumentAsync(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminTransformDocumentAsync(Async)");
        }
        
        // verify the required parameter 'documentIds' is set
        if (documentIds == null) {
            throw new ApiException("Missing the required parameter 'documentIds' when calling adminTransformDocumentAsync(Async)");
        }
        
        // verify the required parameter 'outputType' is set
        if (outputType == null) {
            throw new ApiException("Missing the required parameter 'outputType' when calling adminTransformDocumentAsync(Async)");
        }
        

        okhttp3.Call localVarCall = adminTransformDocumentAsyncCall(token, applicationId, documentIds, outputType, inputTag, outputTag, executeAfterId, pageRange, callbackUrl, transformParams, transformBody, _callback);
        return localVarCall;

    }

    /**
     * Asynchronously converts a document within Leia API (admin only)
     * Asynchronously transforms a document from its current type to the output_type. May generate multiple new documents (for example converting a PDF to image will generate one new image document for each page of the PDF). Returns a Job, that will have to be polled to get the result. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application id whose documents to transform belong to (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :&lt;ul&gt; &lt;li&gt;Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))&lt;/li&gt; &lt;li&gt;Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)&lt;/li&gt; &lt;li&gt;Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0) Examples&lt;ul&gt;     &lt;li&gt;2: will keep all pages starting from page 3&lt;/li&gt;     &lt;li&gt;:5 will keep only pages 1 to 5&lt;/li&gt;     &lt;li&gt;2:5 will keep only pages 3, 4 and 5&lt;/li&gt;     &lt;li&gt;-4: will keep only pages 7 to 10 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;:-2 will keep only pages 1 to 8 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;-4:-2 will keep only pages 7 and 8 if there are 10 total pages)&lt;/li&gt;   &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Stride (::w) : Keep 1 page every w pages starting at the first one (example ::2 will keep only odd pages)&lt;/li&gt; &lt;li&gt;Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages)&lt;/li&gt; &lt;/ul&gt; You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public Job adminTransformDocumentAsync(String token, String applicationId, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String pageRange, String callbackUrl, Object transformParams, TransformBody transformBody) throws ApiException {
        ApiResponse<Job> localVarResp = adminTransformDocumentAsyncWithHttpInfo(token, applicationId, documentIds, outputType, inputTag, outputTag, executeAfterId, pageRange, callbackUrl, transformParams, transformBody);
        return localVarResp.getData();
    }

    /**
     * Asynchronously converts a document within Leia API (admin only)
     * Asynchronously transforms a document from its current type to the output_type. May generate multiple new documents (for example converting a PDF to image will generate one new image document for each page of the PDF). Returns a Job, that will have to be polled to get the result. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application id whose documents to transform belong to (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :&lt;ul&gt; &lt;li&gt;Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))&lt;/li&gt; &lt;li&gt;Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)&lt;/li&gt; &lt;li&gt;Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0) Examples&lt;ul&gt;     &lt;li&gt;2: will keep all pages starting from page 3&lt;/li&gt;     &lt;li&gt;:5 will keep only pages 1 to 5&lt;/li&gt;     &lt;li&gt;2:5 will keep only pages 3, 4 and 5&lt;/li&gt;     &lt;li&gt;-4: will keep only pages 7 to 10 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;:-2 will keep only pages 1 to 8 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;-4:-2 will keep only pages 7 and 8 if there are 10 total pages)&lt;/li&gt;   &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Stride (::w) : Keep 1 page every w pages starting at the first one (example ::2 will keep only odd pages)&lt;/li&gt; &lt;li&gt;Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages)&lt;/li&gt; &lt;/ul&gt; You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> adminTransformDocumentAsyncWithHttpInfo(String token, String applicationId, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String pageRange, String callbackUrl, Object transformParams, TransformBody transformBody) throws ApiException {
        okhttp3.Call localVarCall = adminTransformDocumentAsyncValidateBeforeCall(token, applicationId, documentIds, outputType, inputTag, outputTag, executeAfterId, pageRange, callbackUrl, transformParams, transformBody, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronously converts a document within Leia API (admin only) (asynchronously)
     * Asynchronously transforms a document from its current type to the output_type. May generate multiple new documents (for example converting a PDF to image will generate one new image document for each page of the PDF). Returns a Job, that will have to be polled to get the result. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application id whose documents to transform belong to (required)
     * @param documentIds Comma separated list of document ids to process (required)
     * @param outputType The output type. May be:&lt;ul&gt; &lt;li&gt;image (extract one image for each page in a PDF file)&lt;/li&gt; &lt;li&gt;text (Use OCR on an image to get convert it to text)&lt;/li&gt; &lt;li&gt;text_tree (text in the form of a JSON tree with information about text blocks and their position in the document)&lt;/li&gt; &lt;li&gt;autorotate (Rotates an image that contains text so that it is in readable orientation)&lt;/li&gt; &lt;li&gt;trim (Trims white space around a document)&lt;/li&gt; &lt;li&gt;deskew (Deskew a document)&lt;/li&gt; &lt;/ul&gt;  (required)
     * @param inputTag The tag of the documents to process. If tag is present, document_ids should contain a single value, and the documents processed will be those where original_id&#x3D;document_ids[0] and that contain the specified tag (optional)
     * @param outputTag The tag to add to the documents resulting from the transformation (optional)
     * @param executeAfterId The id of a job that must be in PROCESSED status before this one can be started (used to chain jobs even before the first ones are terminated). If the referenced job becomes FAILED or is CANCELED, this one will fail (optional)
     * @param pageRange The pages that should be used in previous job to process this one. Can only be used if execute_after_id is not null. Pages are indexed from 0. Syntax is the same as Python slices syntax (https://docs.python.org/3/whatsnew/2.3.html#extended-slices). Examples :&lt;ul&gt; &lt;li&gt;Single positive integer : keep only this page (example 4 will keep only page 5 (Remember, pages are indexed from 0))&lt;/li&gt; &lt;li&gt;Single negative integer : keep only this page, but starting from the end (example -4 will keep only page 7 if there are 10 total pages)&lt;/li&gt; &lt;li&gt;Range (x:y) : keep only this range of pages (Including x but excluding y, indexed from 0) Examples&lt;ul&gt;     &lt;li&gt;2: will keep all pages starting from page 3&lt;/li&gt;     &lt;li&gt;:5 will keep only pages 1 to 5&lt;/li&gt;     &lt;li&gt;2:5 will keep only pages 3, 4 and 5&lt;/li&gt;     &lt;li&gt;-4: will keep only pages 7 to 10 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;:-2 will keep only pages 1 to 8 if there are 10 total pages)&lt;/li&gt;     &lt;li&gt;-4:-2 will keep only pages 7 and 8 if there are 10 total pages)&lt;/li&gt;   &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Stride (::w) : Keep 1 page every w pages starting at the first one (example ::2 will keep only odd pages)&lt;/li&gt; &lt;li&gt;Range and stride (x:y:w) : Keep 1 page every w pages within range (x:y) (example 1::2 will keep only even pages)&lt;/li&gt; &lt;/ul&gt; You can use multiple ranges of page at once, comma separated (For example, 0,2:5,-2:-1 keeps the 1st page, plus pages 3-&gt;5, plus the second to last page)  (optional)
     * @param callbackUrl Callback URL that should be called when the job becomes PROCESSED/FAILED/CANCELED. This URL will be called with a HTTP POST method, and the Job object as the payload. Callback server must answer with either a 200 or 204 HTTP response, to acknowledge the callback. Any other response code will be considered as a failure to call the callback. (optional)
     * @param transformParams Free form parameters for the transformation (optional)
     * @param transformBody All the previous query parameters can also be passed as JSON in the body of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document contents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not the owner of the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminTransformDocumentAsyncAsync(String token, String applicationId, List<String> documentIds, TransformTypes outputType, String inputTag, String outputTag, String executeAfterId, String pageRange, String callbackUrl, Object transformParams, TransformBody transformBody, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminTransformDocumentAsyncValidateBeforeCall(token, applicationId, documentIds, outputType, inputTag, outputTag, executeAfterId, pageRange, callbackUrl, transformParams, transformBody, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUntagDocument
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to untag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUntagDocumentCall(String token, String applicationId, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/{application_id}/document/{document_id}/tag/{tag}"
            .replaceAll("\\{" + "application_id" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "tag" + "\\}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUntagDocumentValidateBeforeCall(String token, String applicationId, String documentId, String tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUntagDocument(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling adminUntagDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling adminUntagDocument(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling adminUntagDocument(Async)");
        }
        

        okhttp3.Call localVarCall = adminUntagDocumentCall(token, applicationId, documentId, tag, _callback);
        return localVarCall;

    }

    /**
     * Untags an document (admin only)
     * Untags a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to untag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public void adminUntagDocument(String token, String applicationId, String documentId, String tag) throws ApiException {
        adminUntagDocumentWithHttpInfo(token, applicationId, documentId, tag);
    }

    /**
     * Untags an document (admin only)
     * Untags a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to untag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminUntagDocumentWithHttpInfo(String token, String applicationId, String documentId, String tag) throws ApiException {
        okhttp3.Call localVarCall = adminUntagDocumentValidateBeforeCall(token, applicationId, documentId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Untags an document (admin only) (asynchronously)
     * Untags a document. This method is only accessible to admins
     * @param token The login token obtained via GET /login/{api_key} (required)
     * @param applicationId The application to which the document to untag belongs (required)
     * @param documentId The id of the document (required)
     * @param tag The tag to delete from the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document without the deleted tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not logged in </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Document not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUntagDocumentAsync(String token, String applicationId, String documentId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUntagDocumentValidateBeforeCall(token, applicationId, documentId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
