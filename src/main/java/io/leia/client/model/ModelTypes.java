/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sebastien.favre@docapost.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ModelTypes
 */
@JsonAdapter(ModelTypes.Adapter.class)
public enum ModelTypes {
  
  CLASSIFICATION("classification"),
  
  IMAGE_EXTRACTION("image_extraction"),
  
  KEY_VALUE_EXTRACTION("key_value_extraction");

  private String value;

  ModelTypes(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ModelTypes fromValue(String value) {
    for (ModelTypes b : ModelTypes.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ModelTypes> {
    @Override
    public void write(final JsonWriter jsonWriter, final ModelTypes enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ModelTypes read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ModelTypes.fromValue(value);
    }
  }
}

