/*
 * LEIA RESTful API for AI
 * Leia API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@leia.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.leia.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Description of statuses   * WAITING: Job is waiting for another job to finish before it can start   * READY: The job is ready to start, a worker might be provisioning to run it, or it is waiting for a slot on an existing worker   * STARTING: The job has been picked up by a worker   * LOADING_MODEL: The job is loading the necessary IA model   * PROCESSING: The job is processing the document(s)   * PROCESSED: The job is done, user can find the result in the result field   * FAILED: The job failed, reason can be found in the reason field. This could be caused by an error in LEIA (http_code &#x3D;&#x3D; 5000 in this case) or by a problem with data (http_code &#x3D;&#x3D; 400 in this case)   * CANCELED: The job was canceled by user 
 */
@JsonAdapter(Statuses.Adapter.class)
public enum Statuses {
  
  BLOCKED("BLOCKED"),
  
  WAITING("WAITING"),
  
  READY("READY"),
  
  STARTING("STARTING"),
  
  LOADING_MODEL("LOADING_MODEL"),
  
  PROCESSING("PROCESSING"),
  
  PROCESSED("PROCESSED"),
  
  FAILED("FAILED"),
  
  CANCELED("CANCELED");

  private String value;

  Statuses(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Statuses fromValue(String value) {
    for (Statuses b : Statuses.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Statuses> {
    @Override
    public void write(final JsonWriter jsonWriter, final Statuses enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Statuses read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Statuses.fromValue(value);
    }
  }
}

